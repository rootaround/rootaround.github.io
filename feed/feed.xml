<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>root around</title>
	<subtitle></subtitle>
	
	<link href="https://rootaround.github.io/feed/feed.xml" rel="self"/>
	<link href="https://rootaround.github.io/"/>
	<updated>2023-12-21T12:24:04Z</updated>
	<id>https://example.com/</id>
	<author>
		<name></name>
		<email></email>
	</author>
	
	<entry>
		<title>2023-12-21</title>
		<link href="https://rootaround.github.io/posts/blog/2023-12-21/"/>
		<updated>2023-12-21T12:24:04Z</updated>
		<id>https://rootaround.github.io/posts/blog/2023-12-21/</id>
		<content type="html">&lt;p&gt;&lt;img src=&quot;https://rootaround.github.io/posts/img/banner.jpg&quot; /&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title></title>
		<link href="https://rootaround.github.io/posts/tags/ash/"/>
		<updated>2023-12-21T04:55:48Z</updated>
		<id>https://rootaround.github.io/posts/tags/ash/</id>
		<content type="html"></content>
	</entry>
	
	<entry>
		<title></title>
		<link href="https://rootaround.github.io/toc/"/>
		<updated>2023-12-21T04:55:48Z</updated>
		<id>https://rootaround.github.io/toc/</id>
		<content type="html">&lt;!-- [[2020-05-13-linux-first-shortly-about-kernel]]


[[javascript]] --&gt;
</content>
	</entry>
	
	<entry>
		<title>roadmap</title>
		<link href="https://rootaround.github.io/posts/wiki/roadmap/"/>
		<updated>2022-07-27T16:15:00Z</updated>
		<id>https://rootaround.github.io/posts/wiki/roadmap/</id>
		<content type="html">&lt;h1 id=&quot;2022-iyul&quot; tabindex=&quot;-1&quot;&gt;2022 июль &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/roadmap/#2022-iyul&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input class=&quot;task-list-item-checkbox&quot; disabled=&quot;&quot; type=&quot;checkbox&quot; /&gt; Собрать cheatsheet по &lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh&quot;&gt;sh&lt;/a&gt;&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input class=&quot;task-list-item-checkbox&quot; disabled=&quot;&quot; type=&quot;checkbox&quot; /&gt; Написать про &lt;a href=&quot;https://rootaround.github.io/posts/wiki/roadmap/&quot;&gt;linux-streams&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>sh</title>
		<link href="https://rootaround.github.io/posts/wiki/sh/"/>
		<updated>2022-07-27T16:11:00Z</updated>
		<id>https://rootaround.github.io/posts/wiki/sh/</id>
		<content type="html">&lt;p&gt;Дефолтный shell интерпретатор в ubuntu dash, он же ash, в других дистрибутивах может по-другому, но синтаксис и опции по идее должны быть плюс, минус одинаковыми.&lt;/p&gt;
&lt;p&gt;Про ash есть серия статей по тэгу &lt;a href=&quot;https://rootaround.github.io/tags/ash&quot;&gt;ash&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;В этом разделе собран своего рода cheatsheet по shell.&lt;/p&gt;
&lt;p&gt;Источником для серии статей и этого раздела является документацию по &lt;a href=&quot;https://man7.org/linux/man-pages/man1/dash.1.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dash&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;table-of-contents&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#rezhimy-zapuska&quot;&gt;Режимы запуска &lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#interactive-shell&quot;&gt;Interactive shell &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#non-interactive-shell&quot;&gt;Non-interactive shell &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#login-shell&quot;&gt;Login shell &lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#arguments&quot;&gt;Arguments &lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#noexec-n&quot;&gt;noexec, -n &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#verbose-v&quot;&gt;verbose, -v &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#xtrace-x&quot;&gt;xtrace, -x &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#errexit-e&quot;&gt;errexit, -e &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#allexport-a&quot;&gt;allexport,  -a &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#command-c&quot;&gt;command, -c &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#noclobber-c&quot;&gt;noclobber, -C &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#noglob-f&quot;&gt;noglob, -f &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#nounset-u&quot;&gt;nounset, -u &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#ignoreeof-i&quot;&gt;ignoreeof, -I &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#interactive-i&quot;&gt;interactive, -i &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#login-l&quot;&gt;login, -l &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#monitor-m&quot;&gt;monitor, -m &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#stdin-s&quot;&gt;stdin,-s &lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#operators&quot;&gt;Operators &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#escaping&quot;&gt;Escaping &lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#obratnyj-slesh-backslash&quot;&gt; обратный слэш — backslash &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#parnye-odinarnye-kavychki-matched-single-quotes&quot;&gt;парные одинарные кавычки — matched single quotes &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#parnye-dvojnye-kavychki-matched-double-qoutes&quot;&gt;парные двойные кавычки — matched double qoutes &lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#commands&quot;&gt;Commands &lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#vypolnenie-shell-funkczij&quot;&gt; Выполнение shell-функций &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#vypolnenie-builtin-komand&quot;&gt; Выполнение builtin-команд &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#vypolnenie-komand-programm&quot;&gt; Выполнение команд-программ &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#vypolnenie-komand-programm-podrobnee&quot;&gt; Выполнение команд-программ (подробнее) &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#magic-number&quot;&gt; magic_number &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#shebang&quot;&gt; shebang &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#exit-status&quot;&gt; Exit status &lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#complex-commands&quot;&gt; Complex Commands &lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#pipelines&quot;&gt; Pipelines &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#spiski-lists&quot;&gt; Списки - Lists &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#gruppirovka-spiskov-komand&quot;&gt; Группировка списков команд &lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#uslovnye-konstrukczii-i-czikly&quot;&gt; Условные конструкции и циклы &lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#if-then&quot;&gt; if … then &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#while&quot;&gt; while &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#until&quot;&gt; until &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#for&quot;&gt; for &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#break-continue&quot;&gt; break, continue &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#case&quot;&gt; case &lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#functions&quot;&gt;Functions &lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#parametry-i-peremennye&quot;&gt; Параметры и переменные &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#potoki-v-funkcziyah&quot;&gt; Потоки в функциях &lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#redirections&quot;&gt;Redirections &lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#operator-n-file&quot;&gt; оператор [n]&amp;gt; file &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#operator-n-file-1&quot;&gt; оператор [n]&amp;gt;| file &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#operator-n-file-2&quot;&gt; оператор [n]&amp;gt;&amp;gt; file &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#operator-n-file-3&quot;&gt; оператор [n]&amp;lt; file &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#operator-n1-and-n2&quot;&gt; оператор [n1]&amp;gt;&amp;amp;n2 &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#mnogostrochnye-dannye-dlya-potoka-here-document-heredoc&quot;&gt; Многострочные данные для потока - here-document, heredoc &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#rabota-s-deskriptorami&quot;&gt; Работа с дескрипторами &lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#variables&quot;&gt;Variables &lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#environment-variables&quot;&gt;Environment variables &lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&quot;rezhimy-zapuska&quot; tabindex=&quot;-1&quot;&gt;Режимы запуска &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#rezhimy-zapuska&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;interactive-shell&quot; tabindex=&quot;-1&quot;&gt;Interactive shell &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#interactive-shell&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Обычно так и запускается, принудительно можно включить опцией &lt;code&gt;-i&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ожидает команд из stdin, в stdout пишет результаты, в stderr отладку и ошибки - подробнее будет в &lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/&quot;&gt;linux-streams&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;non-interactive-shell&quot; tabindex=&quot;-1&quot;&gt;Non-interactive shell &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#non-interactive-shell&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Включается при указании пути к скрипту или с аргументом &lt;code&gt;-c&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;sh&lt;/span&gt; ./test.sh

$ &lt;span class=&quot;token function&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;echo 100500&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;login-shell&quot; tabindex=&quot;-1&quot;&gt;Login shell &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#login-shell&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Еще одним режимом запуска является login, включается опцией &lt;code&gt;-l&lt;/code&gt; или передачей первым аргументом символа &lt;code&gt;-&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ash &lt;span class=&quot;token parameter variable&quot;&gt;-l&lt;/span&gt;

$ ash -&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Работает в interactive и non-interactive режимах.&lt;/p&gt;
&lt;p&gt;Смысл режима инициализировать окружение для пользователя. В login-режиме ash ищет и выполняет shell-скрипты &lt;code&gt;/etc/profile&lt;/code&gt; и &lt;code&gt;$HOME/.profile&lt;/code&gt;. Если в этих файлах указать и экспортировать переменную ENV, в которой указать путь к файлу, его содержимое также будет обработано и выполнено как shell-скрипт на этапе запуска.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token environment constant&quot;&gt;$HOME&lt;/span&gt;/.shinit&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; ENV&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&quot;arguments&quot; tabindex=&quot;-1&quot;&gt;Arguments &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#arguments&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;noexec-n&quot; tabindex=&quot;-1&quot;&gt;noexec, &lt;code&gt;-n&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#noexec-n&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Проверка скрипта без выполнения команд. Работает только при выполнении файла-скрипта, но &lt;strong&gt;не&lt;/strong&gt; работает при указании команд через &lt;code&gt;-c&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

$ ash test.sh
&lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;

$ ash &lt;span class=&quot;token parameter variable&quot;&gt;-n&lt;/span&gt; test.sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;У последней команды не будет никакого вывода, потому что указан аргумент &lt;code&gt;-n&lt;/code&gt; и команды echo и exit не будет выполнены, но в случае именно ошибки синтаксиса выведется текст ошибки и ненулевой exit code.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# &#39;&amp;amp;&#39; в начале это ошибка в shell-скрипте&lt;/span&gt;

$ ash &lt;span class=&quot;token parameter variable&quot;&gt;-n&lt;/span&gt; test.sh
./test.sh: line &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;: syntax error: unexpected &lt;span class=&quot;token string&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Конечно этот режим не проверяет наличие самих команд, но для проверки синтаксиса удобно.&lt;/p&gt;
&lt;h2 id=&quot;verbose-v&quot; tabindex=&quot;-1&quot;&gt;verbose, &lt;code&gt;-v&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#verbose-v&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;В stderr будет записано все что ash читает в процессе работы.&lt;/p&gt;
&lt;p&gt;Например, в login-режиме (про него далее) читается файл &lt;code&gt;$HOME/.profile&lt;/code&gt; и выполняются команды из него – с опцией &lt;code&gt;-v&lt;/code&gt; все содержимое &lt;code&gt;.profile&lt;/code&gt; будет записано в stderr для отладки.&lt;/p&gt;
&lt;h2 id=&quot;xtrace-x&quot; tabindex=&quot;-1&quot;&gt;xtrace, &lt;code&gt;-x&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#xtrace-x&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;С этим аргументом каждая выполняемая команда будет записано в stderr&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

$ ash &lt;span class=&quot;token parameter variable&quot;&gt;-x&lt;/span&gt; test.sh
+ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;
+ &lt;span class=&quot;token builtin class-name&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вообще все опции включатся через &lt;code&gt;-&lt;/code&gt; , а выключаются через &lt;code&gt;+&lt;/code&gt; &lt;em&gt;// кажется что нелогично и должно быть наоборот&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;В интерактивном режиме тоже можно включать опции с помощью builtin-команды set&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-x&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# xtrace ВКЛючен&lt;/span&gt;

$ &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; +x

&lt;span class=&quot;token comment&quot;&gt;# xtrace ВЫКЛючен&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;errexit-e&quot; tabindex=&quot;-1&quot;&gt;errexit, &lt;code&gt;-e&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#errexit-e&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;С &lt;code&gt;-e&lt;/code&gt; все непротестированные команды (без проверки exit-кода через &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;elif&lt;/code&gt;) будут приводить к завершению скрипта.&lt;/p&gt;
&lt;p&gt;Для примера рассмотрим скрипт с листингом несуществующей директории.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; /none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;good&#39;&lt;/span&gt;

$ ash test.sh
ls: /none: No such &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; or directory
good
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$?&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;При обычном запуске команды &lt;code&gt;ls&lt;/code&gt; и &lt;code&gt;echo&lt;/code&gt; выполняются независимо друг от друга и &lt;code&gt;echo&lt;/code&gt; будет выполнено после &lt;code&gt;ls&lt;/code&gt; &lt;em&gt;// конечно в данном случае нужно использовать &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, но об этом в следующих статьях&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;С аргументом &lt;code&gt;-e&lt;/code&gt; выход из скрипта произойдет после &lt;code&gt;ls&lt;/code&gt; и скрипт завершится с ненулевым exit-кодом.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ash &lt;span class=&quot;token parameter variable&quot;&gt;-e&lt;/span&gt; test.sh
ls: /none: No such &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; or directory
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$?&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Еще один полезный момент — передача параметров при запуске скрипта. Все аргументы после указания пути к скрипту считаются позиционными аргументами и могут быть почитаны в скрипте из переменных $1, $2&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$11&lt;/span&gt;

$ ash test.sh &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Отдельно стоит отметить $0 - это переменная содержит путь к скрипту&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$0&lt;/span&gt;

$ ash ./test.sh
./test.sh&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;allexport-a&quot; tabindex=&quot;-1&quot;&gt;allexport,  &lt;code&gt;-a&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#allexport-a&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Экспорт env-переменных &lt;em&gt;// не увидел разницы с обычным режимом, все назначенные переменные окружения и так видны внутри shell при запуске&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;TEST&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt; ash &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;echo $TEST&#39;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;

$ &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;TEST&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt; ash &lt;span class=&quot;token parameter variable&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;echo $TEST&#39;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;command-c&quot; tabindex=&quot;-1&quot;&gt;command, &lt;code&gt;-c&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#command-c&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Режим выполнения команд, выполняет команды указанные после аргумента&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ash &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;echo 100500&#39;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;100500&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;noclobber-c&quot; tabindex=&quot;-1&quot;&gt;noclobber, &lt;code&gt;-C&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#noclobber-c&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;тут речь про оператор &lt;code&gt;&amp;gt;&lt;/code&gt; при перенаправление потока в файл, по умолчанию этот оператор создает или перезаписывает содержимое файла, аргумент &lt;code&gt;-C&lt;/code&gt; меняет это поведение — если файл уже существует, произойдет ошибка.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# скрипт записывает значение первого аргумента в файл tmp.txt&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; ./test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; tmp.txt

&lt;span class=&quot;token comment&quot;&gt;# выполняем&lt;/span&gt;
$ ash ./test.sh &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# в файл записано 100&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; tmp.txt
&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# выполняем еще раз&lt;/span&gt;
$ ash ./test.txt &lt;span class=&quot;token number&quot;&gt;101&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# файл перезаписан со значением 101&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; tmp.txt
&lt;span class=&quot;token number&quot;&gt;101&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# выполняем c аргументом -C - получаем ошибку&lt;/span&gt;
$ ash &lt;span class=&quot;token parameter variable&quot;&gt;-C&lt;/span&gt; ./test.txt &lt;span class=&quot;token number&quot;&gt;102&lt;/span&gt;
test.sh: line &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;: can&#39;t create test.txt: File exists&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;noglob-f&quot; tabindex=&quot;-1&quot;&gt;noglob, &lt;code&gt;-f&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#noglob-f&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;В шеллах существует прекрасная штука - file globbing - это возможность указывать путь к файлам не полностью, а, например, через wildcard — &lt;code&gt;cat *.txt&lt;/code&gt; — вывести на экран все файлы с расширением txt.&lt;/p&gt;
&lt;p&gt;Так вот опция &lt;code&gt;-f&lt;/code&gt; отключает file globbing для выполняемого скрипта.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token comment&quot;&gt;# this is script&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; *.sh

&lt;span class=&quot;token comment&quot;&gt;# выводит все файлы с расширением sh&lt;/span&gt;
$ ash test.sh
&lt;span class=&quot;token comment&quot;&gt;# this is script&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; *.sh

&lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; globbing отключен - *.sh интерпретируется как имя файла
$ ash &lt;span class=&quot;token parameter variable&quot;&gt;-f&lt;/span&gt; test.sh
cat: can&lt;span class=&quot;token string&quot;&gt;&#39;t open &#39;&lt;/span&gt;*.sh&#39;: No such &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; or directory&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;nounset-u&quot; tabindex=&quot;-1&quot;&gt;nounset, &lt;code&gt;-u&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#nounset-u&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Завершать скрипт с ошибкой если происходит обращение к переменной, которая не определена.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$SOME&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# скрипт успешно выполнен, хотя переменная SOME не определена&lt;/span&gt;
$ ash test.sh

&lt;span class=&quot;token comment&quot;&gt;# с аргументом -u присходит ошибка&lt;/span&gt;
$ ash &lt;span class=&quot;token parameter variable&quot;&gt;-u&lt;/span&gt; test.sh
test.sh: line &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;: SOME: parameter not &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;ignoreeof-i&quot; tabindex=&quot;-1&quot;&gt;ignoreeof, &lt;code&gt;-I&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#ignoreeof-i&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Игнорирует EOF (символы конца строки) из stdin&lt;/p&gt;
&lt;p&gt;&lt;em&gt;// Пока не очень понятно зачем это нужно, но работает так&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# echo передает EOF (/n) после строки и скрипт выводит содержимое файла скриптов&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cat *.sh&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; ash
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$SOME&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# с -I конец строки игнорируется и будет ошибка&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cat *.sh&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; ash &lt;span class=&quot;token parameter variable&quot;&gt;-I&lt;/span&gt;
Use &lt;span class=&quot;token string&quot;&gt;&quot;exit&quot;&lt;/span&gt; to leave shell.

Use &lt;span class=&quot;token string&quot;&gt;&quot;exit&quot;&lt;/span&gt; to leave shell.

&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;interactive-i&quot; tabindex=&quot;-1&quot;&gt;interactive, &lt;code&gt;-i&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#interactive-i&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;принудительно включается интерактивный режим&lt;/p&gt;
&lt;h2 id=&quot;login-l&quot; tabindex=&quot;-1&quot;&gt;login, &lt;code&gt;-l&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#login-l&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Включает login-режим&lt;/p&gt;
&lt;h2 id=&quot;monitor-m&quot; tabindex=&quot;-1&quot;&gt;monitor, &lt;code&gt;-m&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#monitor-m&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;включает job control, автоматически включается в интерактивном режиме, видимо позволяет включать работу с jobs в скриптах &lt;em&gt;// рассмотрим позже, но уже интересно — можно запустить задачу фоном в скрипте, а потом проконтролировать ее и завершить скрипт&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;stdin-s&quot; tabindex=&quot;-1&quot;&gt;stdin,&lt;code&gt;-s&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#stdin-s&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;читать скрипт из stdin. Если не указан путь к скрипту, то включено.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;date&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; ash
Fri Dec &lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt; 00:38:31 UTC &lt;span class=&quot;token number&quot;&gt;2020&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# идентично c -s&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;date&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; ash &lt;span class=&quot;token parameter variable&quot;&gt;-s&lt;/span&gt;
Fri Dec &lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt; 00:38:31 UTC &lt;span class=&quot;token number&quot;&gt;2020&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# но не работает если указан скрипт&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;date&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; ash &lt;span class=&quot;token parameter variable&quot;&gt;-s&lt;/span&gt; test.sh
&lt;span class=&quot;token comment&quot;&gt;# test script commands&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# при этом выполняются обе команды с -c и -s&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;date&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; ash &lt;span class=&quot;token parameter variable&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;date&#39;&lt;/span&gt;
Fri Dec &lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt; 00:38:31 UTC &lt;span class=&quot;token number&quot;&gt;2020&lt;/span&gt;
Fri Dec &lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt; 00:38:31 UTC &lt;span class=&quot;token number&quot;&gt;2020&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&quot;operators&quot; tabindex=&quot;-1&quot;&gt;Operators &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#operators&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;ash читает скрипт построчно, разбивает его на слова по пробелам и табам.&lt;/p&gt;
&lt;p&gt;Некоторые последовательности символов определяются как операторы.&lt;/p&gt;
&lt;p&gt;Операторы бывают двух видов:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Control operators — для объединения команд в группы, цепочки-пайпланы и условия&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;newline&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Redirection operators — для перенаправления потоков между командами и не только&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;|&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&quot;escaping&quot; tabindex=&quot;-1&quot;&gt;Escaping &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#escaping&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Стандартной проблемой в шеллах и в языках программирования является использование специальных символов (и последовательностей) как обычных символов – это называют экранированием (escape special chars). В ash экранирование спец символов можно сделать 3 способами:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;обратный слэш — backslash&lt;/li&gt;
&lt;li&gt;парные одинарные кавычки — matched single quotes&lt;/li&gt;
&lt;li&gt;парные двойные кавычки — matched double qoutes&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;obratnyj-slesh-backslash&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;backslash&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#backslash&quot;&gt;&lt;/a&gt; обратный слэш — backslash &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#obratnyj-slesh-backslash&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Backslash перед спец символом делает его обычным символом&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# команда ничего не выведет,&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# потому что точка с запятой интеретируется как разделитель команд&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# выведется точка с запятой, как обычный символ&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Кроме этого backslash перед символом конца строки (переводом строки) интерпретируется как продолжение строки&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;parnye-odinarnye-kavychki-matched-single-quotes&quot; tabindex=&quot;-1&quot;&gt;парные одинарные кавычки — matched single quotes &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#parnye-odinarnye-kavychki-matched-single-quotes&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Все что внутри одинарных кавычек, кроме одинарных кавычек, считается обычным символом&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;amp;;|&gt;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Одинарные кавычки при необходимости можно вывести отдельно с помощью &lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#backslash&quot;&gt;backslash&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# последняя кавычка экранирована с помощью backslash&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# и считается обычным символом&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;amp;|$&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&#39;
&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;$&#39;

$ echo &#39;&lt;/span&gt;&lt;span class=&quot;token environment constant&quot;&gt;$PATH&lt;/span&gt;&#39;
&lt;span class=&quot;token environment constant&quot;&gt;$PATH&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;parnye-dvojnye-kavychki-matched-double-qoutes&quot; tabindex=&quot;-1&quot;&gt;парные двойные кавычки — matched double qoutes &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#parnye-dvojnye-kavychki-matched-double-qoutes&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;С двойными кавычками все немного сложнеe.&lt;/p&gt;
&lt;p&gt;Все символы внутри двойных кавычек считаются обычными, за исключением символов:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;знака доллара (dollarsign) - &lt;code&gt;$&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;обратной кавычки (backquote) - &lt;code&gt;`&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;и обратного слэша (backslash) - &lt;code&gt;\&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;backslash внутри двойных кавычек позволяет экранировать только символы: &lt;code&gt;$ ` &amp;quot; \ \ &lt;/code&gt;  &lt;code&gt;&amp;lt;newline&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Кратко рассмотрим зачем вообще нужны эти символы – дальше они будут разобраны подробнее.&lt;/p&gt;
&lt;h3 id=&quot;dollarsign&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;$&lt;/code&gt; - dollarsign &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#dollarsign&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;с помощью &lt;code&gt;$&lt;/code&gt; можно использовать shell-переменные вообще без кавычек&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token environment constant&quot;&gt;$PATH&lt;/span&gt;
/sbin:/usr/sbin:/bin:/usr/bin

&lt;span class=&quot;token comment&quot;&gt;# аналогично $ работает в двойных кавычках&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token environment constant&quot;&gt;$PATH&lt;/span&gt;&quot;&lt;/span&gt;
/sbin:/usr/sbin:/bin:/usr/bin&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;backquote&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;`&lt;/code&gt; - backquote &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#backquote&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;команда, заключенная в обратные кавычки, выполняется и output команды подставляется вместо обратных кавычек. Работает и без двойных кавычек.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
/home/ubuntu

$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;current directory is &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;
current directory is /home/ubuntu&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;backslash&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;\&lt;/code&gt; - backslash &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#backslash&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;работает как и раньше, экранирует символы: &lt;code&gt;$ ` &amp;quot; \ &lt;/code&gt; и backslash перед переводом строки считается продолжением строки без переноса&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;\&lt;span class=&quot;token environment constant&quot;&gt;$PWD&lt;/span&gt; = \
&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;token environment constant&quot;&gt;$PWD&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;token environment constant&quot;&gt;$PWD&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/home/ubuntu&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;kombinirovanie-raznyh-kavychek-dlya-komand-i-argumentov&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;combine-quotes&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#combine-quotes&quot;&gt;&lt;/a&gt; Комбинирование разных кавычек для команд и аргументов &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#kombinirovanie-raznyh-kavychek-dlya-komand-i-argumentov&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Все способы формирования можно комбинировать: использовать поочерердно разные кавычки, переменные:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; my&lt;span class=&quot;token string&quot;&gt;&#39; path is &#39;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; = &quot;&lt;/span&gt;&lt;span class=&quot;token environment constant&quot;&gt;$PWD&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;
my path is  &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; /home/ubuntu&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Главное чтобы в рамках одного аргумента строки соединялись без пробелов, иначе после пробела shell будет считать строку уже другим аргументом.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&quot;commands&quot; tabindex=&quot;-1&quot;&gt;Commands &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#commands&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Вот мы и подобрались к сути, ведь shell нужен как раз для выполнения команд.&lt;/p&gt;
&lt;p&gt;Если при обработке строки скрипта первое слово не является зарезервирванным, то ash начинает обработку этой строки как команды.&lt;/p&gt;
&lt;!--
Команды могут быть простыми — вызов одной команды, или сложными конструкциями из нескольких связанных команд с условиями или без. Начнем по порядку с простых команд.

Для примера рассмотрим команду `env`, которая выводит текущие переменные окружения (environment variables).

```bash
$ env
SHLVL=1
PATH=/sbin:/usr/sbin:/bin:/usr/bin
PWD=/home/ubuntu
```

Команда вывела несколько переменных окружнения:

- `SHLVL` - текущий уровень “вложенности” шеллов, если в этом шелл запустить еще раз команду ash - SHLVL будет равен 2, а внутри этого шелла запустить еще один, то в нем будет SHLVL=3 и так далее
- `PATH` - пути разделенные двоеточиями где нужно искать команды — об этом поговорим чуть дальше
- `PWD` - текущая директория, в которой в данный момент мы находимся, эта env-переменная менятся при переходе между директориями командой `cd`
--&gt;
&lt;p&gt;Cуществуют 3 типа команд: shell-функции, buildin-команды и программы. При выполнении осуществляется поиск команды именно в таком порядке.&lt;/p&gt;
&lt;h2 id=&quot;vypolnenie-shell-funkczij&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;command-types-shell-functions&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#command-types-shell-functions&quot;&gt;&lt;/a&gt; Выполнение shell-функций &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#vypolnenie-shell-funkczij&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Все аргументы переданные с вызовом функции, передаются в функцию. Все environment-переменные также доступны внутри функции. Сама функция выполняется в текущем шелле.
Сейчас важно то что функции также как можно использовать также как и команды-программы и builtin-функции, то есть создавать комбинации из функций и команд.&lt;/p&gt;
&lt;p&gt;Функции рассмотрим в следующих статьях. Сейчас небольшой пример использования&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ hello &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello, &lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# stdout можно перенаправить&lt;/span&gt;
$ hello Kenneth &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; ./tmp.txt
&lt;span class=&quot;token comment&quot;&gt;# или использовать в пайплайнах&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#  - пайплайны разберем в этой статье&lt;/span&gt;
$ hello Kenneth &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt;
hello, Kenneth&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;vypolnenie-builtin-komand&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;command-types-builtin&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#command-types-builtin&quot;&gt;&lt;/a&gt; Выполнение builtin-команд &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#vypolnenie-builtin-komand&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;builtin-команды выполняются внутри текущего shell, без запуска отдельного процесса.
builtin-команды в ash также разберем отдельной статьей, их достаточно много, но в общем некоторые общие команды такие как &lt;code&gt;echo&lt;/code&gt;, &lt;code&gt;ls&lt;/code&gt; и другие могут быть встроены в shell.&lt;/p&gt;
&lt;h2 id=&quot;vypolnenie-komand-programm&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;command-types-programs&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#command-types-programs&quot;&gt;&lt;/a&gt; Выполнение команд-программ &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#vypolnenie-komand-programm&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Если имя команды не является shell-функцией или builtin-командой, значит это программа в файловой системе и ее нужно найти и выполнить.&lt;/p&gt;
&lt;p&gt;Если имя команды содержит слэш &lt;code&gt;/&lt;/code&gt;, то команда сразу выполняется без поиска в файловой системе – имя команды используется как путь к программе&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ /usr/bin/htop
&lt;span class=&quot;token comment&quot;&gt;# команда запуститься сразу&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Если слэшей в имени команды нет, то происходит поиск файла программы по имени в директориях из environment-переменной PATH.&lt;/p&gt;
&lt;p&gt;В переменной PATH содержится список директорий разделенных двоеточием &lt;code&gt;:&lt;/code&gt;, конечно же переменную PATH можно изменить, установить свой список директорий или дополнить существующий.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token environment constant&quot;&gt;$PATH&lt;/span&gt;
/sbin:/usr/sbin:/bin:/usr/bin

$ &lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token environment constant&quot;&gt;$PATH&lt;/span&gt;:/home/ubuntu/bin

$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token environment constant&quot;&gt;$PATH&lt;/span&gt;
/sbin:/usr/sbin:/bin:/usr/bin:/home/ubuntu/bin&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Текущая директория (PWD) тоже может содержаться в PATH, для этого нужно указать пустую строку между двоеточиями или в конце&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# в конце строки&lt;/span&gt;
$ &lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/sbin:/bin:

&lt;span class=&quot;token comment&quot;&gt;# пустая директория&lt;/span&gt;
$ &lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/sbin:/bin::

&lt;span class=&quot;token comment&quot;&gt;# в начале строки&lt;/span&gt;
$ &lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;:/sbin:/bin&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Для выполнения будет использована первая найденная команда, то есть порядок директорий важен.&lt;/p&gt;
&lt;p&gt;Если команда не существует ни в одной директории, получим ошибку not found&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ noop
/usr/bin/ash: noop: not found&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;vypolnenie-komand-programm-podrobnee&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;command-exec&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#command-exec&quot;&gt;&lt;/a&gt; Выполнение команд-программ (подробнее) &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#vypolnenie-komand-programm-podrobnee&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Когда команда найдена начинается ее выполнение и тут снова возможно несколько сценариев:&lt;/p&gt;
&lt;h2 id=&quot;magic-number&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;command-exec-magic-number&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#command-exec-magic-number&quot;&gt;&lt;/a&gt; magic_number &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#magic-number&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;исполняемый файл-программа начинается с magic number. Тут имеется ввиду ELF-заголовок по которому определяется что программа может выполняться и дальше при выполнении происходит чтение из этого файла используя ELF-формат.&lt;/p&gt;
&lt;p&gt;В этом случае создается новый процесс, которому переданы все аргументы команды и переменные окружения.&lt;/p&gt;
&lt;h2 id=&quot;shebang&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;command-exec-shebang&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#command-exec-shebang&quot;&gt;&lt;/a&gt; shebang &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#shebang&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Если программа не имеет ELF-заголовка, но начинается с &lt;code&gt;#!&lt;/code&gt; программа выполняется как отдельный shell. Причем после &lt;code&gt;#!&lt;/code&gt; указывается интрепретатор и один аргумент&lt;/p&gt;
&lt;p&gt;Ситаксис&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!interprer [optional-arg]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Пример&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/usr/bin/ash&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Скрипт выше будет выполнен интерпертатором ash. Кроме shell таком образом могут выполняться программы на интерпретируемых языках программирования, например, python или php&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/usr/bin/python&lt;/span&gt;
print&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;123&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Для того чтобы выполнить скрипт как программу нужно чтобы для файла был установлен атрибут eXecutable&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; +x ./test.sh
$ ./test.sh
&lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;exit-status&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;exit-status&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#exit-status&quot;&gt;&lt;/a&gt; Exit status &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#exit-status&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;В Linux каждый процесс завершается с определенным числовым статусом, exit-статусом или exit-кодом.&lt;/p&gt;
&lt;p&gt;Если exit-код равен 0 — программа выполнена успешно, другие значения означают ошибку.
У каждой команды свой список exit-кодов и их значение можно посмотреть в документации (man) команды.&lt;/p&gt;
&lt;p&gt;Builtin-команды и shell-функции также возвращают exit-коды.&lt;/p&gt;
&lt;p&gt;Забегая немного вперед - exit-код последней выполненной команды можно посмотреть с помощью специальной shell-переменной &lt;code&gt;$?&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# ...&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$?&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В случае списков команд итоговым будет exit-код последней команды.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&quot;complex-commands&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;complex-commands&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#complex-commands&quot;&gt;&lt;/a&gt; Complex Commands &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#complex-commands&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Все предыдущие разделы были необходимой подготовкой к пониманию более сложных конструкций из команд.&lt;/p&gt;
&lt;p&gt;Итак команды могут быть одним из следующих:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;простой командой (simple command)&lt;/li&gt;
&lt;li&gt;пайплайном (pipeline)&lt;/li&gt;
&lt;li&gt;списком команд (list)&lt;/li&gt;
&lt;li&gt;составной командой (compound command)&lt;/li&gt;
&lt;li&gt;определением функции (function definition)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;pipelines&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;complex-commands-pipelines&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#complex-commands-pipelines&quot;&gt;&lt;/a&gt; Pipelines &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#pipelines&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pipeline - последовательность команд разделенных управляющим оператором &lt;code&gt;|&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Stdout каждой команды перенаправляется в stdin следующей команды, а для последней команды stdout работает как обычно. Как итоговый exit-код используется exit-код последней команды.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; abc &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
a&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В примере выше stdout команды &lt;code&gt;echo abc&lt;/code&gt; передается в stdin команды &lt;code&gt;head&lt;/code&gt;, которая берет из своего stdin только один символ.&lt;/p&gt;
&lt;p&gt;Для примера с exit-кодом не будем передавать значение аргумента &lt;code&gt;-c&lt;/code&gt;, в этом случае команда &lt;code&gt;head&lt;/code&gt; завершается с ошибкой&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; abc &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt;
head: option requires an argument -- &lt;span class=&quot;token string&quot;&gt;&#39;c&#39;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# ... сообщение об ошибке&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$?&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;&amp;lt;&amp;lt; команда завершилась с ошибкой&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Exit-код пайплайна можно инвертировать, если добавить перед пайплайном восклицательный знак &lt;code&gt;!&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; abc &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt;
head: option requires an argument -- &lt;span class=&quot;token string&quot;&gt;&#39;c&#39;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# ... сообщение об ошибке&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$?&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Для каждой команды можно использовать операторы перенаправления. Для примера возьмем вывод команды &lt;code&gt;head -c&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt;
head: option requires an argument -- &lt;span class=&quot;token string&quot;&gt;&#39;c&#39;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;head -c&lt;/code&gt; передает stdout команде &lt;code&gt;cat&lt;/code&gt;, а уже stdout команды &lt;code&gt;cat&lt;/code&gt; выводится в терминал&lt;/p&gt;
&lt;p&gt;Если перенаправить результат cat в /dev/null …&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; /dev/null
head: option requires an argument -- &lt;span class=&quot;token string&quot;&gt;&#39;c&#39;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… то ничего не поменяется, потому что текст ошибки выводится в stderr-поток, тут мы можем использовать перенаправление — перенаправляем stderr в stdout — в итоге и stderr и stdout команды &lt;code&gt;head&lt;/code&gt; попадают в stdin команды &lt;code&gt;cat&lt;/code&gt;, а потом в /dev/null&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; /dev/null&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;spiski-lists&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;lists&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#lists&quot;&gt;&lt;/a&gt; Списки - Lists &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#spiski-lists&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Для последовательного выполнения команд без перенаправления потоков существуют списки команд.&lt;/p&gt;
&lt;h3 id=&quot;simple-list&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;simple-lists&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#simple-lists&quot;&gt;&lt;/a&gt; Simple List - &lt;code&gt;;&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#simple-list&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Самы простой вариант составить список без связи команд это использовать между командами &lt;code&gt;;&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Команды будут выполнены последовательно одна за другой в указанном порядке, при этом даже если первая команда завершится с ненулевым exit-кодом, остальные все равно будут выполнены.&lt;/p&gt;
&lt;h3 id=&quot;and-list-and-and&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;and-lists&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#and-lists&quot;&gt;&lt;/a&gt; AND-List - &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#and-list-and-and&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Для того чтобы команды выполнялись только в случае успешного завершения предыдущей команды используют оператор &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;В этом случае следующая команда будет выполнена только если предыдущая завершилась с exit-кодом равным 0.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# есть текстовый файл abc.txt, в котором содержатся 3 символа &#39;abc&#39;&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; abc.txt
abc

&lt;span class=&quot;token comment&quot;&gt;# составляем список команд команд:&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# - head читает один символ из файла&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# - echo выводит &#39;- first char in file&#39;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#   если предыдущая команда завершилась успешно&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;abc.txt &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; - first char in file&#39;&lt;/span&gt;
a - first char &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# head выполнилась успешно и затем выполнилась команда echo&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# если убрать число символов в команде head - возникнет ошибка -&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# head завершится с exit-кодом 1 и echo не будет выполнено&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;abc.txt &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; - first char in file&#39;&lt;/span&gt;
head: option requires an argument -- &lt;span class=&quot;token string&quot;&gt;&#39;c&#39;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;or-list&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;or-lists&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#or-lists&quot;&gt;&lt;/a&gt; OR-List - &lt;code&gt;||&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#or-list&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;В OR-List команда следующая за оператором &lt;code&gt;||&lt;/code&gt; выполняется только если exit-код предыдущей команды больше 0.&lt;/p&gt;
&lt;p&gt;Возьмем последнюю команду из предыдущего примера и немного изменим&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# убираем значение аргумента -с&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# меняем &amp;amp;&amp;amp; на ||&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# меняем текст сообщения&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;abc.txt &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;it is failed&#39;&lt;/span&gt;
head: option requires an argument -- &lt;span class=&quot;token string&quot;&gt;&#39;c&#39;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# ...&lt;/span&gt;
it is failed

&lt;span class=&quot;token comment&quot;&gt;# echo выполнилось потому что exit-код первой команды больше 0&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# если исправить первую команду - echo перестанет выполняться&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;abc.txt &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;it is failed&#39;&lt;/span&gt;
a&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;gruppirovka-spiskov-komand&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;grouping&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#grouping&quot;&gt;&lt;/a&gt; Группировка списков команд &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#gruppirovka-spiskov-komand&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Команды могут быть сгруппированы двумя способами:&lt;/p&gt;
&lt;h3 id=&quot;pervyj-ispolzuya-kruglye-skobki&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;grouping-parentheses&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#grouping-parentheses&quot;&gt;&lt;/a&gt; Первый - используя круглые скобки &lt;code&gt;()&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#pervyj-ispolzuya-kruglye-skobki&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;В этом случае команды будут выполнены в отдельном shell и команды не будут влиять на текущий shell&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;echo &lt;span class=&quot;token string&quot;&gt;&#39;abc&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
a

$ &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;export &lt;span class=&quot;token assign-left variable&quot;&gt;TEST&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# переменная TEST не появится в текущем shell&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;vtoroj-sposob-figurnye-skobki&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;grouping-curly&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#grouping-curly&quot;&gt;&lt;/a&gt; Второй способ - фигурные скобки - &lt;code&gt;{}&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#vtoroj-sposob-figurnye-skobki&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Этот способ также как и первый позволяет сгруппировать stdout списка команд, как будто это одна команда, но команды выполняются в текущем shell.&lt;/p&gt;
&lt;p&gt;Первое обязательное условие этого способа - это наличие пробелов после первой и перед второй фигурными скобок.
Вторым обязательным условием является наличие точки с запятой &lt;code&gt;;&lt;/code&gt; перед второй, завершающей скобкой &lt;code&gt;}&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# также можно использовать другие списки, пайплайны&lt;/span&gt;
$ &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;abc&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
a&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&quot;uslovnye-konstrukczii-i-czikly&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;conditions-and-loops&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#conditions-and-loops&quot;&gt;&lt;/a&gt; Условные конструкции и циклы &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#uslovnye-konstrukczii-i-czikly&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;С этого момента простое выполнение команд начинает превращаться в shell-программирование 😃&lt;/p&gt;
&lt;h2 id=&quot;if-then&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;if&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#if&quot;&gt;&lt;/a&gt; if … then &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#if-then&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Синтаксис&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; list
&lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; list
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;elif&lt;/span&gt; list
&lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;    list &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; list &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Если list в &lt;code&gt;if&lt;/code&gt; завершается с exit-кодом 0 - выполняется первый &lt;code&gt;then list&lt;/code&gt;, а если exit-код больше 0 и есть &lt;code&gt;else list&lt;/code&gt; - то будет выполнен он, аналогично для &lt;code&gt;elif .. then&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Все что после if, then, else, elif является просто списками команд.&lt;/p&gt;
&lt;p&gt;Единственным условием является разделение списка команд от служебных слов с помощью переноса строки, либо точкой с запятой &lt;code&gt;;&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# то же самое в одну строку&lt;/span&gt;
$ &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# чуть более сложно выглядящий пример&lt;/span&gt;
$ &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# первый список команд завершается с exit-кодом больше 0&lt;/span&gt;
$ &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; /nowhere &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;/dev/null &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;good&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bad&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
bad
&lt;span class=&quot;token comment&quot;&gt;# выполнился else&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В примерах мы видим stdout всех выполняющихся команд. Если значения stdout или stderr не нужны - их нужно перенаправлять в файлы или в /dev/null.&lt;/p&gt;
&lt;p&gt;После описания синтаксиса и примеров может возникнуть вопрос про условия в квадратных скобках&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token assign-left variable&quot;&gt;TEST&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;
$ &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$TEST&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;100&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;good&#39;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bad&#39;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Разве квадратные скобки не являются частью синтаксиса?&lt;/p&gt;
&lt;p&gt;Нет, не являются. И это одна из “магических” штук, которые с ходу кажутся простыми, но в итоге могут работать не так как ожидаешь.&lt;/p&gt;
&lt;p&gt;Оказывается открывающяя скобка &lt;code&gt;[&lt;/code&gt; это команда &lt;code&gt;test&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Документация по &lt;code&gt;man [&lt;/code&gt; и &lt;code&gt;man test&lt;/code&gt; будет содержать одинаковую информацию.&lt;/p&gt;
&lt;p&gt;Если поискать такую команду с помощью &lt;code&gt;which&lt;/code&gt; (which определяет где хранится команда на файловой системе используя PATH)&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
/usr/bin/&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Закрывающая скобка &lt;code&gt;]&lt;/code&gt; является обязательным завершающим аргументом для команды &lt;code&gt;[&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
ash: missing &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Конкретно в случае ash команды &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt; и некоторые другие являются builtin-командами, мы разберем их через пару статей этой серии.&lt;/p&gt;
&lt;p&gt;Теперь &lt;code&gt;if&lt;/code&gt; конструкция с квадратными скобками …&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$TEST&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;100&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;good&#39;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… просто преобразуется в список из одной команды&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$TEST&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;100&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;good&#39;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;и точка с запятой в конце нужна чтобы разделить аргументы команды &lt;code&gt;test&lt;/code&gt; от служебного слова &lt;code&gt;then&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;while&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;while&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#while&quot;&gt;&lt;/a&gt; while &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#while&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;C циклом &lt;code&gt;while&lt;/code&gt; все еще проще чем &lt;code&gt;if&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Синтаксис&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; list
&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; list
&lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Пока список команд после &lt;code&gt;while&lt;/code&gt; завершается с exit-code равным 0 выполняется список команд после &lt;code&gt;do&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;.txt
$ &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;.txt &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;/dev/null &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;1&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;has file&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;.txt
&lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;
has &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# has file - выводится один раз и после этого следует выход из цикла&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;until&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;until&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#until&quot;&gt;&lt;/a&gt; until &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#until&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;until&lt;/code&gt; работает аналогично &lt;code&gt;while&lt;/code&gt;, только цикл выполняется пока exit-код первого списка команд &lt;strong&gt;не равен&lt;/strong&gt; 0.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# пока нет файла 2.txt цикл будет работать&lt;/span&gt;
$ &lt;span class=&quot;token keyword&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;.txt &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;/dev/null &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;1&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;has no file&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;.txt &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;

has no &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;for&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;for&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#for&quot;&gt;&lt;/a&gt; for &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#for&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ситаксис&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; variable &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; word &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;   list
&lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Цикл &lt;code&gt;for&lt;/code&gt; позволяет перебирать список слов и на каждом шаге что-то выполнять с элементом&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token for-or-select variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;i = &lt;span class=&quot;token variable&quot;&gt;$i&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;
i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;С возможность подстановки результата команды (command substitution) - &lt;code&gt;$(command)&lt;/code&gt; - цикл &lt;code&gt;for&lt;/code&gt; позволяет перебирать все что угодно. Command substitution и другие полезные возможности рассмотрим в следующей статье.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# команда ls выдает список файлов в текущей директории&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# выдает в строку разделенные пробелами&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;.txt &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;.txt &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;.txt

&lt;span class=&quot;token comment&quot;&gt;# используя for и command substitution&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# можем перебрать в цикле список файлов&lt;/span&gt;
$ &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token for-or-select variable&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;file = &lt;span class=&quot;token variable&quot;&gt;$file&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;.txt
&lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;.txt
&lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;.txt&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;break-continue&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;break-continue&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#break-continue&quot;&gt;&lt;/a&gt; break, continue &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#break-continue&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;синтаксис&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt; - прерывает цикл &lt;code&gt;for&lt;/code&gt; или &lt;code&gt;while&lt;/code&gt; (&lt;code&gt;until&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;continue&lt;/code&gt; - переход на следующую итерацию цикла&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Если есть вложенные циклы, то можно указывая n применять &lt;code&gt;break&lt;/code&gt; или &lt;code&gt;continue&lt;/code&gt; для нескольких циклов&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token for-or-select variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token for-or-select variable&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; a b c&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$i&lt;/span&gt; - &lt;span class=&quot;token variable&quot;&gt;$j&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; - a
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; - a
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; - a
&lt;span class=&quot;token comment&quot;&gt;# каждый раз второй цикл будет прерываться на первой итерации&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# если поменять на break 2 то будет выведено только 1 - a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;case&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;case&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#case&quot;&gt;&lt;/a&gt; case &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#case&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Синтаксис&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; word &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;pattern&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; list &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
&lt;span class=&quot;token keyword&quot;&gt;esac&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Проверяет соответствие word одному или нескольким паттернам, выполняется список команд у паттерна, который совпадает первым.&lt;/p&gt;
&lt;p&gt;завершающий &lt;code&gt;esac&lt;/code&gt; это &lt;code&gt;case&lt;/code&gt; наоборот, также как &lt;code&gt;if&lt;/code&gt; и &lt;code&gt;fi&lt;/code&gt;, кто-то придумал - так и осталось (или там какая-то другая история) 😃&lt;/p&gt;
&lt;p&gt;В самом простом виде в &lt;code&gt;case&lt;/code&gt; можно выполнять команды или устанавливать переменные или и то и другое вместе&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;1&#39;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;2&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;esac&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Первую круглую скобку можно опустить. Кроме указания полных значений можно использовать Shell Patterns.&lt;/p&gt;
&lt;p&gt;Shell patterns позволяют указывать паттерны нестрогого соответствия для строк.&lt;/p&gt;
&lt;p&gt;В Shell Patterns могут использоваться мета-символы &lt;code&gt;! * ? [&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;case-asterisk&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#case-asterisk&quot;&gt;&lt;/a&gt; &lt;code&gt;*&lt;/code&gt; - соответвует любой последовательности символов, можно использовать как &lt;code&gt;case&lt;/code&gt; по умолчанию.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
*&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;default&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;esac&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id=&quot;case-question&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#case-question&quot;&gt;&lt;/a&gt; &lt;code&gt;?&lt;/code&gt; - соответствует одному любому символу&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;??&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;100 or 1??&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;esac&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id=&quot;case-bracket&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#case-bracket&quot;&gt;&lt;/a&gt; &lt;code&gt;[&lt;/code&gt; - позволяет указать класс символов, внутри можно указать конкретные символы или диапазон символов, также можно комбинировать с другими мета-символами&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a100
&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;ab&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;-9&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;*&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ab1-9&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;esac&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cимволы &lt;code&gt;]&lt;/code&gt; и &lt;code&gt;-&lt;/code&gt; тоже можно использовать как символы внутри последовательности. Для этого символ &lt;code&gt;]&lt;/code&gt; нужно разместить сразу после открывающей фигурной скобки &lt;code&gt;[&lt;/code&gt; (но после &lt;code&gt;!&lt;/code&gt;, если используется). Символ &lt;code&gt;-&lt;/code&gt; нужно разместить первым или последним внутри класса символов.&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;case-excl-mark&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#case-excl-mark&quot;&gt;&lt;/a&gt; &lt;code&gt;!&lt;/code&gt; - используется внутри класса символов и означает &lt;strong&gt;несоответствие&lt;/strong&gt; классу.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a100
&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;ab&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;-9&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;*&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;c1-9&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;esac&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# последний паттерн сработает и выведет c1-9 если i будет равно c100&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&quot;functions&quot; tabindex=&quot;-1&quot;&gt;Functions &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#functions&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function-name function&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;command&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
  &lt;span class=&quot;token builtin class-name&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;exitstatus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Функции могут содержать всего одну команду и записываться без фигурных скобок&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ hello&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello&#39;&lt;/span&gt;
$ hello
Hello&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Или несколько команд&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function-name function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello&#39;&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;World&#39;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
$ hello
Hello
World&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Каждая функция работает как обычная команда-программа и возвращает exit-код. По умолчанию возвращается 0, но можно вернуть нужный exit-код c помощью return. При этом выполнение функции прекращается на return.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function-name function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello&#39;&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;World&#39;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# World не выводится&lt;/span&gt;
$ hello
Hello

&lt;span class=&quot;token comment&quot;&gt;# $? содержит exit-код предыдущей команды&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$?&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&quot;parametry-i-peremennye&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;parameters-variables&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#parameters-variables&quot;&gt;&lt;/a&gt; Параметры и переменные &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#parametry-i-peremennye&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Параметры (Parameters) могут позиционными и специальными, а параметры с именем называются переменными (Variables).&lt;/p&gt;
&lt;h3 id=&quot;poziczionnye-parametry-positional-parameters&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;postional-parameters&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#postional-parameters&quot;&gt;&lt;/a&gt; Позиционные параметры - Positional Parameters &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#poziczionnye-parametry-positional-parameters&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;При запуске скрипта все параметры перечисленные после команды являются позиционными параметрами и ash позволяет обращаться к ним по номерам, начиная с 1.&lt;/p&gt;
&lt;p&gt;В параметре &lt;code&gt;$0&lt;/code&gt; хранится путь к текущему скрипту или путь к shell, если запущен интерактивный режим&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# параметр $0 самого shell хранит путь к shell-программе&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$0&lt;/span&gt;
/usr/bin/ash

$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; ./test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$0=&#39;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$0&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$1=&#39;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$2=&#39;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$2&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# передаем пару параметров скрипту test.sh&lt;/span&gt;
$ ash ./test.sh first second
&lt;span class=&quot;token variable&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;./test.sh
&lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;first
&lt;span class=&quot;token variable&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;second&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Точно такая же логика с позиционными параметрами работает и для функций. В &lt;code&gt;$0&lt;/code&gt; будет содержаться путь к shell, а параметры в функции можно передавать аналогично скриптам&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function-name function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$0=&#39;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello, &lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

$ hello World
&lt;span class=&quot;token variable&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/usr/bin/ash
Hello, World&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Позиционные параметры в скриптах и функциях можно переопределять с помощью builtin-команды &lt;code&gt;set&lt;/code&gt; (подробно синтаксис set разберем в отдельной статье про builtin-команды)&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function-name function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello, &lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt; and &lt;span class=&quot;token variable&quot;&gt;$2&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; Beavis Butthead&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello, &lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt; and &lt;span class=&quot;token variable&quot;&gt;$2&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

$ hello Rick Morty
Hello, Rick and Morty
Hello, Beavis and Butthead&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;peremennye-variables&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;variables&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#variables&quot;&gt;&lt;/a&gt; Переменные - Variables &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#peremennye-variables&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Shell-переменные можно использовать внутри скриптов для хранения значений&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token assign-left variable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
$ &lt;span class=&quot;token assign-left variable&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
$ &lt;span class=&quot;token assign-left variable&quot;&gt;TEST&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100500&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$a&lt;/span&gt;-&lt;span class=&quot;token variable&quot;&gt;$b&lt;/span&gt;-&lt;span class=&quot;token variable&quot;&gt;$TEST&lt;/span&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;-2-100500&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Но эти параметры не передаются при вызовах команд в environment-переменные, можно делать вручную задавать environment-переменные для каждой команды&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; ./test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$TEST=&#39;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$TEST&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# переменная TEST будет пуста&lt;/span&gt;
$ ./test.sh
&lt;span class=&quot;token variable&quot;&gt;$TEST&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# передаем значение переменной TEST на момент вызова&lt;/span&gt;
$ &lt;span class=&quot;token assign-left variable&quot;&gt;TEST&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; ./test.sh
&lt;span class=&quot;token variable&quot;&gt;$TEST&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Для того чтобы shell-переменные передавались в окружение (environment) всем выполняемым командам, нужно экспортировать переменную&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;TEST&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100500&lt;/span&gt;

$ ./test.sh
&lt;span class=&quot;token variable&quot;&gt;$TEST&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100500&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;peremennye-v-funkcziyah&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;function-variables&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#function-variables&quot;&gt;&lt;/a&gt; Переменные в функциях &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#peremennye-v-funkcziyah&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;В функциях видны все shell-переменные (и environment-переменные тоже) — их можно использовать внутри.&lt;/p&gt;
&lt;p&gt;Также все команды, выполненные внутри функций влияют на shell, в общем все точно также как и при выполнении обычных команд без функции. Чтобы команды не влияли на текущий shell можно &lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#grouping-parentheses&quot;&gt;группировать их в круглых скобках &lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;lokalnye-peremennye-v-funkcziyah&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;local-function-variables&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#local-function-variables&quot;&gt;&lt;/a&gt; Локальные переменные в функциях &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#lokalnye-peremennye-v-funkcziyah&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Если определенные переменные нужны только внутри функции можно воспользоваться builtin-функцией local.&lt;/p&gt;
&lt;p&gt;Команда &lt;code&gt;local&lt;/code&gt; должна быть вызвана в начале функции и должна содержать имя локальной переменной. Локальные переменные никак не инициализируются и задавать значения им нужно отдельно.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# в shell своя переменная name&lt;/span&gt;
$ &lt;span class=&quot;token assign-left variable&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;Pachino

$ &lt;span class=&quot;token function-name function&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; name &lt;span class=&quot;token comment&quot;&gt;# в функции своя переменная name&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;local name=&#39;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$name&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;DeNiro
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;local name=&#39;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$name&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

$ hello
&lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;Pachino
&lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;DeNiro

&lt;span class=&quot;token comment&quot;&gt;# в shell переменная не поменялась&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;name=&#39;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$name&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;Pachino&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Кроме этого scope локальных переменных сохраняется при создании вложенных функций - то есть для вложенной функции будет своя переменная, а не глобальная.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token assign-left variable&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;Pachino

$ &lt;span class=&quot;token function-name function&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; name
  &lt;span class=&quot;token assign-left variable&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;DeNiro
  &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;name=&#39;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$name&lt;/span&gt;

  &lt;span class=&quot;token function-name function&quot;&gt;bang&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bang name=&#39;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$name&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  bang
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;


$ hello
&lt;span class=&quot;token assign-left variable&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;DeNiro
&lt;span class=&quot;token comment&quot;&gt;# в функции bang переиспользуется локальная переменная name&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# из функции hello&lt;/span&gt;
bang &lt;span class=&quot;token assign-left variable&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;DeNiro

&lt;span class=&quot;token comment&quot;&gt;# в shell осталась своя переменная&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$name&lt;/span&gt;
Pachino&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вместо имени переменной в &lt;code&gt;local&lt;/code&gt; можно указать &lt;code&gt;-&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function-name function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; -
&lt;span class=&quot;token comment&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В этом случае все установленные опции с помощью команды &lt;code&gt;set&lt;/code&gt; будут локальными и вернуться к своим значениям при выходе из функции.&lt;/p&gt;
&lt;h2 id=&quot;potoki-v-funkcziyah&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;function-streams&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#function-streams&quot;&gt;&lt;/a&gt; Потоки в функциях &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#potoki-v-funkcziyah&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Раз функция ведет себя как команда, значит внутри нее можно работать с потоками и использовать функции в пайплайнах&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# передаем в cat данные из stdin-потока&lt;/span&gt;
$ hello &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;World&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; hello
Hello
World&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;stdout и stderr- потоки у функции также свои&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function-name function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;World&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

$ hello
Hello
World

&lt;span class=&quot;token comment&quot;&gt;# перенаправляем stderr в /dev/null&lt;/span&gt;
$ hello &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;/dev/null
Hello&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&quot;redirections&quot; tabindex=&quot;-1&quot;&gt;Redirections &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#redirections&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;про потоки процесса и их нумерацию:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0 - stdin - входной поток процесса, через него могут передаваться данные из другой команды&lt;/li&gt;
&lt;li&gt;1 - stdout - выходной поток процесса, в этот поток процесс может писать результаты&lt;/li&gt;
&lt;li&gt;2 - stderr - поток для ошибок и отладки&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Все перенаправления потоков, рассмотренные дальше, действуют только в рамках текущей команды или набора команд.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&quot;operator-n-file&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;operator-n-to-file&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#operator-n-to-file&quot;&gt;&lt;/a&gt; оператор &lt;code&gt;[n]&amp;gt; file&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#operator-n-file&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Потоки можно перенаправлять в файлы&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 123 будет записано в файл&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# тут мы перенаправили поток stdout в файл tmp.txt&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; tmp.txt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Оператор &lt;code&gt;&amp;gt;&lt;/code&gt; позволяет перенаправить поток в файл по номеру потока. Приведенная выше команда это краткая запись команды. Полная запись выглядит так&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# перенаправляем stdout в файл tmp.txt&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;1&lt;/span&gt;&gt;&lt;/span&gt; tmp.txt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Аналогичным образом можно перенаправить stderr&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;error&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;2&lt;/span&gt;&gt;&lt;/span&gt; errors.log&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Оператор &lt;code&gt;&amp;gt;&lt;/code&gt; полностью перезаписывает содержимое файла новыми данными, если файл уже существует. Если файла нет - создает и записывает данные.&lt;/p&gt;
&lt;p&gt;Для защиты от перезаписи файлов, например, при отладке каких-то уже существующих скриптов, существует аргумент &lt;code&gt;-С&lt;/code&gt; (&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#noclobber-c&quot;&gt;noclobber&lt;/a&gt;), который предотвращает перезапись файла — с этим аргументом ash будет выдавать ошибку, если файл уже существует.&lt;/p&gt;
&lt;h2 id=&quot;operator-n-file-1&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;operator-n-to-stick-file&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#operator-n-to-stick-file&quot;&gt;&lt;/a&gt; оператор &lt;code&gt;[n]&amp;gt;| file&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#operator-n-file-1&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Делает все то же самое что и предыдущий оператор, но при запуске с аргументом &lt;code&gt;-C&lt;/code&gt; (&lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/#noclobber-c&quot;&gt;noclobber&lt;/a&gt;) файл все равно будет перезаписан — такой force для перенаправления потока в файл.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# скрипт записывает текст в файл с использованием оператора &gt;&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; tmp.txt

&lt;span class=&quot;token comment&quot;&gt;# выполняем - в файл tmp.txt записывается 123&lt;/span&gt;
$ ash test.sh

&lt;span class=&quot;token comment&quot;&gt;# еще раз выполняем тот же скрипт,&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# файл tmp.txt будет перезаписан с тем же текстом 123&lt;/span&gt;
$ ash test.sh

&lt;span class=&quot;token comment&quot;&gt;# с аргументом -C при перенаправлении с оператором &gt; будет ошибка&lt;/span&gt;
$ ash &lt;span class=&quot;token parameter variable&quot;&gt;-C&lt;/span&gt; test.sh
test.sh: line &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;: can&#39;t create tmp.txt: File exists

&lt;span class=&quot;token comment&quot;&gt;# если переделать оператор &gt; на &gt;|&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1234&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;|&lt;/span&gt; tmp.txt

&lt;span class=&quot;token comment&quot;&gt;# то даже с аргументом -C файл будет перезаписан&lt;/span&gt;
$ ash &lt;span class=&quot;token parameter variable&quot;&gt;-C&lt;/span&gt; test.sh&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;operator-n-file-2&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;operator-n-double-to-file&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#operator-n-double-to-file&quot;&gt;&lt;/a&gt; оператор &lt;code&gt;[n]&amp;gt;&amp;gt; file&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#operator-n-file-2&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Дописывает данные из потока в конец файла, если файла нет - то создает&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;567&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;1&lt;/span&gt;&gt;&gt;&lt;/span&gt; tmp.txt
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;890&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; tmp.txt
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; tmp.txt
&lt;span class=&quot;token number&quot;&gt;1234&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;567&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;890&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;operator-n-file-3&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;operator-n-from-file&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#operator-n-from-file&quot;&gt;&lt;/a&gt; оператор &lt;code&gt;[n]&amp;lt; file&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#operator-n-file-3&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;чтение потока из файла&lt;/p&gt;
&lt;p&gt;В основном используется для чтения stdin&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# команда cat выводит stdin&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# или содержимое файла (если указан путь к файлу)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# будет выведено содержимое stdin,&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# которое будет прочитано из файла tmp.txt&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;0&lt;/span&gt;&amp;lt;&lt;/span&gt; tmp.txt
&lt;span class=&quot;token number&quot;&gt;1234&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;567&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;890&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# сокращенная запись без указания номера потока&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; tmp.txt
&lt;span class=&quot;token comment&quot;&gt;# вывод такой же&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Оператор перенаправления может быть записан и до команды&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; tmp.txt &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# командой cat из stdin будет выведено содержимое файла tmp.txt&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;operator-n1-and-n2&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;operator-n-to-descriptor&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#operator-n-to-descriptor&quot;&gt;&lt;/a&gt; оператор &lt;code&gt;[n1]&amp;gt;&amp;amp;n2&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#operator-n1-and-n2&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Перенаправляет поток n1 (или stdout - 1 по умолчанию) в поток с номером n2&lt;/p&gt;
&lt;p&gt;Интерактивный шелл тоже процесс и у него есть свои stdin, stdout, stderr&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# пишем в stdout - поток с номером 1&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;out&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;1&lt;/span&gt;
out

&lt;span class=&quot;token comment&quot;&gt;# пишем в stderr - поток с номером 2&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;error&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;2&lt;/span&gt;
error&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вывод обеих команд будет отображен в консоли, потому что для интерактивного шелла весь вывод идет на экран.&lt;/p&gt;
&lt;p&gt;Для скриптов также можно писать отдельно в stdout и stderr&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# скрипт пишет раздельно в stdout и в stderr&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;out&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;1&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;error&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;2&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# если просто выполнить скрипт, то всё увидим в консоли&lt;/span&gt;
$ ash test.sh
out
error

&lt;span class=&quot;token comment&quot;&gt;# С помощью оператора &gt;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# мы можем перенаправить stdout и stderr в разные файлы&lt;/span&gt;
$ ash test.sh &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;1&lt;/span&gt;&gt;&lt;/span&gt; stdout.txt &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;stderr.txt
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; stdout.txt
out
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; stderr.txt
error&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Еще с помощью этого оператора можно наоборот сводить потоки, например, stdout и stderr в один файл&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ash test.sh &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;1&lt;/span&gt;&gt;&lt;/span&gt; stdout.txt
error

&lt;span class=&quot;token comment&quot;&gt;# в консоли вывелось error,&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# потому что sterr не перенаправлен и отображается в консоль&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# заворачиваем поток stderr в stdout&lt;/span&gt;
$ ash test.sh &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;1&lt;/span&gt;&gt;&lt;/span&gt; stdout.txt &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;1&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# и stdout и stderr записались в файл stdout.txt&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; stdout.txt
out
error&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;mnogostrochnye-dannye-dlya-potoka-here-document-heredoc&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;heredoc&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#heredoc&quot;&gt;&lt;/a&gt; Многострочные данные для потока - here-document, heredoc &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#mnogostrochnye-dannye-dlya-potoka-here-document-heredoc&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Во всех примерах до этого мы рассмотрели перенаправления в файл и из файла. С помощью backslash(/) можно визуально переносить строки для лучшей читаемости и перенаправить их на вход другой команде (об этом в следующих статьях). Но при этом переносы строк не будут выводится&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;very very very \
long long long \
text text text&quot;&lt;/span&gt;
very very very long long long text text text&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Для решения этой проблемы в ash существует синтаксис here-document, который в общем виде выглядит так&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[n]&amp;lt;&amp;lt; delimiter
    here-doc-text ...
delimiter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;delimiter может быть любой последовательностью символов, первый раз после указания delimiter на следующей строке должны начаться данные, после второго указания delimiter с начала строки данные завершились. Обычно delimiter указывают EOL - как аббревиатура End Of Line, но он может быть и другой последовательностью символов.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;0&lt;/span&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; EOL
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; very very very
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; long long long
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; text text text
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; EOL
very very very
long long long
text text text&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В интерактивном режиме после EOL и переноса строки shell символом &lt;code&gt;&amp;gt;&lt;/code&gt; в начале строки подсказывает что ввод команды продолжается.&lt;/p&gt;
&lt;p&gt;Для скриптов heredoc используется аналогично&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;EOL
1
2
3
EOL&lt;/span&gt;
$ ash test.sh
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Если требуется в скрипте визуально отделить содержимое heredoc, можно использовать символ табуляции и добавить оператор &lt;code&gt;&amp;lt;&amp;lt;-&lt;/code&gt; – в этом случае shell удалит все табы с начала строк&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;EOL
&amp;lt;tab&gt;1
&amp;lt;tab&gt;2
&amp;lt;tab&gt;3
EOL&lt;/span&gt;
$ ash test.sh
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Кроме этого внутри heredoc можно использовать shell-переменные&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;EOL
pwd = &lt;span class=&quot;token environment constant&quot;&gt;$PWD&lt;/span&gt;
EOL&lt;/span&gt;
$ ash test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;pwd&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; /home/ubuntu&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Чтобы текст внутри heredoc обрабатывался как обычные символы без подстановки переменных, нужно первый delimiter заключить в кавычки (двойные или одинарные)&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;EOL&#39;
pwd = $PWD
EOL&lt;/span&gt;
$ ash test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;pwd&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token environment constant&quot;&gt;$PWD&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;rabota-s-deskriptorami&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;descriptors&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#descriptors&quot;&gt;&lt;/a&gt; Работа с дескрипторами &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#rabota-s-deskriptorami&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Еще одна фича для работы с дескрипторами файлов — это возможность открыть файл в какой-то номер дескриптора, номера могут быть от 0 до 9.&lt;/p&gt;
&lt;p&gt;Для того чтобы использовать номер дескриптора в скрипте или интерактивном shell для нескольких команд нужно использовать builtin-команду exec (подробнее мы рассмотрим ее в следующих статьях).&lt;/p&gt;
&lt;p&gt;Сейчас нам нужно знать что все перенаправления выполненные в exec становятся постоянными (permanant) в рамках шелла или скрипта, то есть открытые дескрипторы можно использовать для последующих команд.&lt;/p&gt;
&lt;h3 id=&quot;operator-n-file-4&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;operator-open-descriptor&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#operator-open-descriptor&quot;&gt;&lt;/a&gt; оператор &lt;code&gt;[n]&amp;lt;&amp;gt; file&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#operator-n-file-4&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Позволяет открыть дескриптор файла на чтение и запись&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# открываем поток (дескриптор файла) с номером 3 для файла tmp.txt&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;3&lt;/span&gt;&amp;lt;&gt;&lt;/span&gt; ./tmp.txt
&lt;span class=&quot;token comment&quot;&gt;# так как команда была выполнена с помощью exec&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# дескриптор доступен для следующих команд&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;1&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;3&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;2&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;3&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;3&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;3&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; ./tmp.txt
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;operator-n&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;operator-close-descriptor&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#operator-close-descriptor&quot;&gt;&lt;/a&gt; оператор &lt;code&gt;[n]&amp;gt;-&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#operator-n&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Закрыть дескриптор файла&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# продолжая предыдущий пример&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;3&lt;/span&gt;&gt;&lt;/span&gt;-
&lt;span class=&quot;token comment&quot;&gt;# дескриптор файла tmp.txt закрыт&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# если снова открыть дескриптор,&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# то запись или чтение из файла начнется с начала&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;3&lt;/span&gt;&amp;lt;&gt;&lt;/span&gt; ./tmp.txt
&lt;span class=&quot;token comment&quot;&gt;# читаем из дескриптора 2 байта (1\n) - единицу и перенос строки&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;3&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# сейчас указатель дексриптора указывает на вторую строку (2\n)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# запишем 9&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;3&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; ./tmp.txt
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Аналогично можно работать с input с помощью операторов &lt;code&gt;[n1]&amp;lt;&amp;amp;n2&lt;/code&gt;, &lt;code&gt;[n]&amp;lt;-&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&quot;variables&quot; tabindex=&quot;-1&quot;&gt;Variables &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#variables&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Команда запускает процесс, у процесса могут быть переменные окружения (environment variables, env vars). Переменные окружения для конкретной команды можно задать непосредственно при вызове:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token assign-left variable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;SHLVL&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/sbin:/usr/sbin:/bin:/usr/bin
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PWD&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/ubuntu
&lt;span class=&quot;token assign-left variable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;&amp;lt;&amp;lt; переменная &#39;a&#39; есть в переменных окружения&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вообще и в интерактивном шелле и в скриптах все что соответствует паттертну &lt;code&gt;name=value&lt;/code&gt; с начала строки (или после служебного слова) считается переменной и если после переменных следует команда, то все эти переменные попадут в переменные окружения процесса запущенного этой командой:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token assign-left variable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Если переменные указаны без команды, то они определяются как переменные шелла - shell variables.&lt;/p&gt;
&lt;p&gt;Shell variables доступны для подстановки в самом шелле, но во все выполняемые команды передаются только environment variables.&lt;/p&gt;
&lt;p&gt;Shell-переменные (в том числе environment-переменные) можно посмотреть builtin-командой &lt;code&gt;set&lt;/code&gt;, а env-переменные командой &lt;code&gt;env&lt;/code&gt; или &lt;code&gt;export&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Несколько примеров чтобы стало понятнее&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# определяем shell-переменную my_test_var&lt;/span&gt;
$ &lt;span class=&quot;token assign-left variable&quot;&gt;my_test_var&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# смотрим что переменная определилась&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# в результатах set выводятся вообще все переменные,&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# в том числе environment variables&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PS4&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;+ &#39;&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PWD&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/home/ubuntu&#39;&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;SHLVL&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;1&#39;&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;my_test_var&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;1&#39;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;&amp;lt;&amp;lt; тут есть переменная &#39;my_test_var&#39;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# так как my_test_var еще не environment variable,&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# ее нет в выводе команды env&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;SHLVL&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/sbin:/usr/sbin:/bin:/usr/bin
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PWD&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/ubuntu

&lt;span class=&quot;token comment&quot;&gt;# но ее можно использовать в самом шелле&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;my_test_var = &#39;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$my_test_var&lt;/span&gt;
my_test_var &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# для того чтобы переменная стала environment-переменной&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# ее нужно экспортировать&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; my_test_var

&lt;span class=&quot;token comment&quot;&gt;# теперь переменная my_test_var является environment-переменной&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# и передаётся в environment всех команд запущенных в шелле&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;SHLVL&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/sbin:/usr/sbin:/bin:/usr/bin
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PWD&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/ubuntu
&lt;span class=&quot;token assign-left variable&quot;&gt;my_test_var&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# для конкретного вызова команды&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# environment-переменную всегда можно переопределить&lt;/span&gt;
$ &lt;span class=&quot;token assign-left variable&quot;&gt;my_test_var&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100500&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;my_test_var&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100500&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Пример показывает что все переменные доступны для подстановки внутри shell, но только environment-переменные передаются в окружение всем командам, выполняемым в shell.&lt;/p&gt;
&lt;p&gt;В названии переменных могут использоваться символы латинского алфавита, числа и символ подчеркивания, название переменной не может начинаться с числа.&lt;/p&gt;
&lt;p&gt;Для более явного разделения переменных существует негласное правило:&lt;/p&gt;
&lt;p&gt;environment-переменные пишутся заглавными буквами, а обычные shell-переменные строчными&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# PATH - environment-переменная&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token environment constant&quot;&gt;$PATH&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# my_test_var - обычная shell-переменная&lt;/span&gt;
$ &lt;span class=&quot;token assign-left variable&quot;&gt;my_test_var&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;environment-variables&quot; tabindex=&quot;-1&quot;&gt;Environment variables &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#environment-variables&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;home&quot; tabindex=&quot;-1&quot;&gt;HOME &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#home&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Домашняя директория пользователя и passwd файла, переменная устанавливается командой login и используется множеством разных команд, например, командой cd без параметров для перехода в домашнюю директорию пользователя&lt;/p&gt;
&lt;p&gt;Для проверки можно запустить ash без env-переменных от root пользователя и выполнить команду login&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;## запускаем ash без env-параметров текущего shell и под root&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;## root - нужен для запуска login,&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;## иначе будет ошибка login: must be suid to work properly&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-i&lt;/span&gt; /usr/bin/ash

&lt;span class=&quot;token comment&quot;&gt;## далее одинарная решетка это prompt root пользователя&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# env&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;SHLVL&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/sbin:/usr/sbin:/bin:/usr/bin
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PWD&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/ubuntu

&lt;span class=&quot;token comment&quot;&gt;# login -f ubuntu&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;## ...&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/ubuntu/bin:/home/ubuntu/.local/bin:/data/bin:/bin:/usr/bin
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PWD&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/ubuntu
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;SHLVL&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;USER&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;ubuntu
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;HOME&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/ubuntu
&lt;span class=&quot;token comment&quot;&gt;## ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;path&quot; tabindex=&quot;-1&quot;&gt;PATH &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#path&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Список директорий разделенный двоеточиями.
В этих директориях shell ищет программы.&lt;/p&gt;
&lt;h3 id=&quot;cdpath&quot; tabindex=&quot;-1&quot;&gt;CDPATH &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#cdpath&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Путь относительно которого работает команда cd&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# задаем CDPATH=/home/ubuntu&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;CDPATH&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/ubuntu

$ &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt;
/home/ubuntu

&lt;span class=&quot;token comment&quot;&gt;# теперь все относительные пути без указания первого слэша&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# будут считаться относительно /home/ubuntu&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; tmp
&lt;span class=&quot;token comment&quot;&gt;# мы в /home/ubuntu/tmp - если такая директория существует&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;mail&quot; tabindex=&quot;-1&quot;&gt;MAIL &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#mail&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Следующие 3 env-переменных нужны для проверки почты, точнее в самом shell реализовано слежение за изменением в файле&lt;/p&gt;
&lt;p&gt;в MAIL может содержаться путь к файлу, за изменениями которого нужно следить.&lt;/p&gt;
&lt;h3 id=&quot;mailcheck&quot; tabindex=&quot;-1&quot;&gt;MAILCHECK &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#mailcheck&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;в MAILCHECK устанавливается время в секундах, через сколько нужно проверять файл или файлы указанные в MAIL или MAILPATH&lt;/p&gt;
&lt;p&gt;По умолчанию = 60&lt;/p&gt;
&lt;p&gt;Если поставить 0, то проверка будет происходит после каждого выполнения команды, В доке формулируется так “If set to 0, the check will occur at each prompt”, то есть при каждом показе приглашения к вводу команды.&lt;/p&gt;
&lt;h3 id=&quot;mailpath&quot; tabindex=&quot;-1&quot;&gt;MAILPATH &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#mailpath&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;в MAILPATH через двоеточие &lt;code&gt;:&lt;/code&gt; может быть указано несколько файлов, которые нужно проверять&lt;/p&gt;
&lt;p&gt;если указан MAILPATH, то MAIL игнорируется.&lt;/p&gt;
&lt;p&gt;работает это так&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; ~/mail.txt
$ &lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;MAILPATH&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/ubuntu/mail.txt
$ &lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;MAILCHECK&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# меняем файл, в случае почтовых программ они меняют файл&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# и bash видимо умеет их парсить и выводить даже количество писем&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; ~/mail.txt

&lt;span class=&quot;token comment&quot;&gt;# далее после выполнения команды или просто пустой строки ash выведет&lt;/span&gt;
$
you have mail
$
&lt;span class=&quot;token comment&quot;&gt;# то есть проверка происходит перед показом prompt&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;ps1&quot; tabindex=&quot;-1&quot;&gt;PS1 &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#ps1&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Prompt String - это основная подсказка к вводу команды и по умолчанию для обычного пользователя это переменная равна &lt;code&gt;$ &lt;/code&gt; (доллар и пробел), для суперпользователя root &lt;code&gt;# &lt;/code&gt; (решетка и пробел)&lt;/p&gt;
&lt;p&gt;значение может содержать не специальные последовательности&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# например, по умолчанию PS1 в ash выводит еще и текущую директорию&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# сейчас мы в домашней директории&lt;/span&gt;
~ $

&lt;span class=&quot;token comment&quot;&gt;# а переменная равна&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token environment constant&quot;&gt;$PS1&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;w &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;$&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Подробнее про эти опции поговорим в статьях про &lt;a href=&quot;https://rootaround.github.io/posts/wiki/sh/&quot;&gt;bash&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;ps2&quot; tabindex=&quot;-1&quot;&gt;PS2 &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#ps2&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Подсказка ввода для многострочных команд. По умолчанию &lt;code&gt;&amp;gt; &lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ (
&amp;gt; echo 123
&amp;gt; )
123
$
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;ps3&quot; tabindex=&quot;-1&quot;&gt;PS3 &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#ps3&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Почему-то не описано в документации, возможно в ash не используется&lt;/p&gt;
&lt;h3 id=&quot;ps4&quot; tabindex=&quot;-1&quot;&gt;PS4 &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#ps4&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;В случае если включена трассировка опцией &lt;code&gt;-x&lt;/code&gt;, перед каждой выполненной командой выводится значение PS4&lt;/p&gt;
&lt;p&gt;По умолчанию равно &lt;code&gt;+ &lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-x&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
+ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
+ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
$&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;ifs&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;IFS&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#IFS&quot;&gt;&lt;/a&gt; IFS &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#ifs&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Input Field Separators&lt;/p&gt;
&lt;p&gt;Разделители при чтении и выводе параметров - подробнее разберем в следующей статье про Special Parameters (здесь будет ссылка на статью)&lt;/p&gt;
&lt;h3 id=&quot;term&quot; tabindex=&quot;-1&quot;&gt;TERM &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#term&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;В переменной содержится название текущего терминала, и используется программами для определения возможностей терминала, например, программа может определить поддерживает ли терминал цвета (xterm или xterm-256color)&lt;/p&gt;
&lt;h3 id=&quot;histsize&quot; tabindex=&quot;-1&quot;&gt;HISTSIZE &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#histsize&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Сколько команд хранить в истории shell’a (это переключение истории команд стрелками)&lt;/p&gt;
&lt;p&gt;По умолчанию равно 15&lt;/p&gt;
&lt;h3 id=&quot;pwd&quot; tabindex=&quot;-1&quot;&gt;PWD &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#pwd&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Текущая директория, эту переменную меняет команда cd&lt;/p&gt;
&lt;h3 id=&quot;oldpwd&quot; tabindex=&quot;-1&quot;&gt;OLDPWD &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#oldpwd&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Предыдущая директория&lt;/p&gt;
&lt;h3 id=&quot;ppid&quot; tabindex=&quot;-1&quot;&gt;PPID &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/wiki/sh/#ppid&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ID процесса текущего shell&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token environment constant&quot;&gt;$PPID&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1527&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>linux shells</title>
		<link href="https://rootaround.github.io/posts/wiki/linux-shells/"/>
		<updated>2022-07-27T16:10:00Z</updated>
		<id>https://rootaround.github.io/posts/wiki/linux-shells/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://rootaround.github.io/tags/ash/&quot;&gt;ash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Переехал с hexo на 11ly</title>
		<link href="https://rootaround.github.io/posts/blog/202207262240/"/>
		<updated>2022-07-26T22:40:00Z</updated>
		<id>https://rootaround.github.io/posts/blog/202207262240/</id>
		<content type="html">&lt;p&gt;Переехал с hexo на 11ly - &lt;a href=&quot;https://www.11ty.dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.11ty.dev/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Понадобилось, чтобы вести посты и вики в obsidian.&lt;/p&gt;
&lt;p&gt;Почти из коробки завелись obsidian-ссылки вида &lt;a href=&quot;https://rootaround.github.io/posts/wiki/javascript&quot;&gt;javascript&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Кроме этого понравилась минималистичная тема базового шаблона и такой же подход eleventy к работе - по сути один конфиг на старте и один пакет, ничего лишнего.&lt;/p&gt;
&lt;p&gt;Пробую, смотрю как летит. 🛫&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Test</title>
		<link href="https://rootaround.github.io/posts/drafts/test/"/>
		<updated>2022-07-25T20:12:00Z</updated>
		<id>https://rootaround.github.io/posts/drafts/test/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https://rootaround.github.io/posts/wiki/javascript&quot;&gt;javascript&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;mrk-test-markdown-it-page&quot; tabindex=&quot;-1&quot;&gt;mrk test markdown-it page &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/drafts/test/#mrk-test-markdown-it-page&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id=&quot;n1&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://rootaround.github.io/posts/drafts/&quot;&gt;N1&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/drafts/test/#n1&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;https://www.gstatic.com/charts/loader.js&quot;&gt;&lt;/script&gt;
&lt;div id=&quot;chart_div&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
google.charts.load(&#39;current&#39;, {packages:[&quot;orgchart&quot;]});
google.charts.setOnLoadCallback(drawChart);

function drawChart() {
  var data = new google.visualization.DataTable();
  data.addColumn(&#39;string&#39;, &#39;Name&#39;);
  data.addColumn(&#39;string&#39;, &#39;Manager&#39;);
  data.addColumn(&#39;string&#39;, &#39;ToolTip&#39;);

  // For each orgchart box, provide the name, manager, and tooltip to show.
  data.addRows([
    [
        {
            v:&#39;Mike&#39;,
            f:&#39;Mike&lt;div style=&quot;color:red; font-style:italic&quot;&gt;President&lt;/div&gt;&#39;
        },
        &#39;&#39;,
        &#39;The President&#39;
    ],
    [
        {
            v:&#39;Jim&#39;,
            f:&#39;Jim&lt;div style=&quot;color:red; font-style:italic&quot;&gt;Vice President&lt;/div&gt;&#39;
        },
        &#39;Mike&#39;,
        &#39;VP&#39;
    ],
    [
        &#39;Alice&#39;,
        &#39;Mike&#39;,
        &#39;&#39;
    ],
    [
        &#39;Bob&#39;,
        &#39;Jim&#39;,
        &#39;Bob Sponge&#39;
    ],
    [
        &#39;Carol&#39;,
        &#39;Bob&#39;,
        &#39;&#39;
    ]
  ]);

  // Create the chart.
  var chart = new google.visualization.OrgChart(document.getElementById(&#39;chart_div&#39;));
  // Draw the chart, setting the allowHtml option to true for the tooltips.
  chart.draw(data, {allowHtml:true});
}
&lt;/script&gt;
&lt;p&gt;&lt;strong&gt;Advertisement 😃&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://nodeca.github.io/pica/demo/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pica&lt;/a&gt;&lt;/strong&gt; - high quality and fast image
resize in browser.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/nodeca/babelfish/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;babelfish&lt;/a&gt;&lt;/strong&gt; - developer friendly
i18n with plurals support and easy syntax.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You will like those projects!&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&quot;h1-heading&quot; tabindex=&quot;-1&quot;&gt;h1 Heading 😎 &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/drafts/test/#h1-heading&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;h2-heading&quot; tabindex=&quot;-1&quot;&gt;h2 Heading &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/drafts/test/#h2-heading&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h3-heading&quot; tabindex=&quot;-1&quot;&gt;h3 Heading &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/drafts/test/#h3-heading&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h4-heading&quot; tabindex=&quot;-1&quot;&gt;h4 Heading &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/drafts/test/#h4-heading&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;h5&gt;h5 Heading&lt;/h5&gt;
&lt;h6&gt;h6 Heading&lt;/h6&gt;
&lt;h2 id=&quot;horizontal-rules&quot; tabindex=&quot;-1&quot;&gt;Horizontal Rules &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/drafts/test/#horizontal-rules&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;hr /&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;typographic-replacements&quot; tabindex=&quot;-1&quot;&gt;Typographic replacements &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/drafts/test/#typographic-replacements&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Enable typographer option to see result.&lt;/p&gt;
&lt;p&gt;© © ® ® ™ ™ (p) (P) ±&lt;/p&gt;
&lt;p&gt;test… test… test… test?.. test!..&lt;/p&gt;
&lt;p&gt;!!! ??? , – —&lt;/p&gt;
&lt;p&gt;“Smartypants, double quotes” and ‘single quotes’&lt;/p&gt;
&lt;h2 id=&quot;emphasis&quot; tabindex=&quot;-1&quot;&gt;Emphasis &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/drafts/test/#emphasis&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;This is bold text&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is bold text&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This is italic text&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This is italic text&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;s&gt;Strikethrough&lt;/s&gt;&lt;/p&gt;
&lt;h2 id=&quot;blockquotes&quot; tabindex=&quot;-1&quot;&gt;Blockquotes &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/drafts/test/#blockquotes&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Blockquotes can also be nested…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;…by using additional greater-than signs right next to each other…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;…or with spaces between arrows.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;lists&quot; tabindex=&quot;-1&quot;&gt;Lists &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/drafts/test/#lists&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unordered&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a list by starting a line with &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, or &lt;code&gt;*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Sub-lists are made by indenting 2 spaces:
&lt;ul&gt;
&lt;li&gt;Marker character change forces new list start:
&lt;ul&gt;
&lt;li&gt;Ac tristique libero volutpat at&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Facilisis in pretium nisl aliquet&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Nulla volutpat aliquam velit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Very easy!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ordered&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Lorem ipsum dolor sit amet&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consectetur adipiscing elit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integer molestie lorem at massa&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use sequential numbers…&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;…or keep all the numbers as &lt;code&gt;1.&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Start numbering with offset:&lt;/p&gt;
&lt;ol start=&quot;57&quot;&gt;
&lt;li&gt;foo&lt;/li&gt;
&lt;li&gt;bar&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;code&quot; tabindex=&quot;-1&quot;&gt;Code &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/drafts/test/#code&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Inline &lt;code&gt;code&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Indented code&lt;/p&gt;
&lt;p&gt;// Some comments
line 1 of code
line 2 of code
line 3 of code&lt;/p&gt;
&lt;p&gt;Block code “fences”&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Sample text here...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Syntax highlighting&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; bar&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;tables&quot; tabindex=&quot;-1&quot;&gt;Tables &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/drafts/test/#tables&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;data&lt;/td&gt;
&lt;td&gt;path to data files to supply the data that will be passed into templates.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;engine&lt;/td&gt;
&lt;td&gt;engine to be used for processing templates. Handlebars is the default.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ext&lt;/td&gt;
&lt;td&gt;extension to be used for dest files.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Right aligned columns&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:right&quot;&gt;Option&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;data&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;path to data files to supply the data that will be passed into templates.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;engine&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;engine to be used for processing templates. Handlebars is the default.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;ext&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;extension to be used for dest files.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;links&quot; tabindex=&quot;-1&quot;&gt;Links &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/drafts/test/#links&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://dev.nodeca.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;link text&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://nodeca.github.io/pica/demo/&quot; title=&quot;title text!&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;link with title&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Autoconverted link &lt;a href=&quot;https://github.com/nodeca/pica&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/nodeca/pica&lt;/a&gt; (enable linkify to see)&lt;/p&gt;
&lt;h2 id=&quot;images&quot; tabindex=&quot;-1&quot;&gt;Images &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/drafts/test/#images&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&quot;Minion&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://octodex.github.com/images/minion.png&quot; width=&quot;undefined&quot; height=&quot;undefined&quot; /&gt;
&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;Stormtroopocat&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://octodex.github.com/images/stormtroopocat.jpg&quot; width=&quot;undefined&quot; height=&quot;undefined&quot; /&gt;&lt;figcaption&gt;The Stormtroopocat&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Like links, Images also have a footnote style syntax&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;Alt text&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://octodex.github.com/images/dojocat.jpg&quot; width=&quot;undefined&quot; height=&quot;undefined&quot; /&gt;&lt;figcaption&gt;The Dojocat&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;With a reference later in the document defining the URL location:&lt;/p&gt;
&lt;h2 id=&quot;plugins&quot; tabindex=&quot;-1&quot;&gt;Plugins &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/drafts/test/#plugins&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The killer feature of &lt;code&gt;markdown-it&lt;/code&gt; is very effective support of
&lt;a href=&quot;https://www.npmjs.org/browse/keyword/markdown-it-plugin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;syntax plugins&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;emojies&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://github.com/markdown-it/markdown-it-emoji&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Emojies&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/drafts/test/#emojies&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Classic markup: 😉 :crush: 😢 :tear: 😆 😋&lt;/p&gt;
&lt;p&gt;Shortcuts (emoticons): 😃 😦 😎 😉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;see &lt;a href=&quot;https://github.com/markdown-it/markdown-it-emoji#change-output&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;how to change output&lt;/a&gt; with twemoji.&lt;/p&gt;
&lt;h3 id=&quot;subscript-superscript&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://github.com/markdown-it/markdown-it-sub&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Subscript&lt;/a&gt; / &lt;a href=&quot;https://github.com/markdown-it/markdown-it-sup&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Superscript&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/drafts/test/#subscript-superscript&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;19&lt;sup&gt;th&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;H&lt;sub&gt;2&lt;/sub&gt;O&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;ins&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://github.com/markdown-it/markdown-it-ins&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;lt;ins&amp;gt;&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/drafts/test/#ins&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;ins&gt;Inserted text&lt;/ins&gt;&lt;/p&gt;
&lt;h3 id=&quot;mark&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://github.com/markdown-it/markdown-it-mark&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;lt;mark&amp;gt;&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/drafts/test/#mark&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;Marked text&lt;/mark&gt;&lt;/p&gt;
&lt;h3 id=&quot;footnotes&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://github.com/markdown-it/markdown-it-footnote&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Footnotes&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/drafts/test/#footnotes&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Footnote 1 link&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://rootaround.github.io/posts/drafts/test/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Footnote 2 link&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://rootaround.github.io/posts/drafts/test/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Inline footnote&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://rootaround.github.io/posts/drafts/test/#fn3&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt; definition.&lt;/p&gt;
&lt;p&gt;Duplicated footnote reference&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://rootaround.github.io/posts/drafts/test/#fn2&quot; id=&quot;fnref2:1&quot;&gt;[2:1]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3 id=&quot;definition-lists&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://github.com/markdown-it/markdown-it-deflist&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Definition lists&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/drafts/test/#definition-lists&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Term 1&lt;/p&gt;
&lt;p&gt;: Definition 1
with lazy continuation.&lt;/p&gt;
&lt;p&gt;Term 2 with &lt;em&gt;inline markup&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;: Definition 2&lt;/p&gt;
&lt;p&gt;{ some code, part of Definition 2 }&lt;/p&gt;
&lt;p&gt;Third paragraph of definition 2.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Compact style:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Term 1
~ Definition 1&lt;/p&gt;
&lt;p&gt;Term 2
~ Definition 2a
~ Definition 2b&lt;/p&gt;
&lt;h3 id=&quot;abbreviations&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://github.com/markdown-it/markdown-it-abbr&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Abbreviations&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/drafts/test/#abbreviations&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is HTML abbreviation example.&lt;/p&gt;
&lt;p&gt;It converts “HTML”, but keep intact partial entries like “xxxHTMLyyy” and so on.&lt;/p&gt;
&lt;p&gt;*[HTML]: Hyper Text Markup Language&lt;/p&gt;
&lt;h3 id=&quot;custom-containers&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://github.com/markdown-it/markdown-it-container&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Custom containers&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/posts/drafts/test/#custom-containers&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;::: warning
&lt;em&gt;here be dragons&lt;/em&gt;
:::&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Footnote &lt;strong&gt;can have markup&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;and multiple paragraphs. &lt;a href=&quot;https://rootaround.github.io/posts/drafts/test/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Footnote text. &lt;a href=&quot;https://rootaround.github.io/posts/drafts/test/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://rootaround.github.io/posts/drafts/test/#fnref2:1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Text of inline footnote &lt;a href=&quot;https://rootaround.github.io/posts/drafts/test/#fnref3&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry>
	
	<entry>
		<title>javascript</title>
		<link href="https://rootaround.github.io/posts/wiki/javascript/"/>
		<updated>2021-07-24T00:00:00Z</updated>
		<id>https://rootaround.github.io/posts/wiki/javascript/</id>
		<content type="html"></content>
	</entry>
	
	<entry>
		<title>Linux Tools: shells, ash #6 - environment variables</title>
		<link href="https://rootaround.github.io/2021-06-linux-tools-shells-ash-6-environment-variables/"/>
		<updated>2021-06-16T20:00:00Z</updated>
		<id>https://rootaround.github.io/2021-06-linux-tools-shells-ash-6-environment-variables/</id>
		<content type="html">&lt;p&gt;Уже достаточно много раз говорили о переменных и environment-переменных , в этом разделе разберем встроенные переменные ash&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Предыдущая статья: &lt;a href=&quot;https://rootaround.github.io/posts/blog/2021-01-linux-tools-shells-part-6-ash-functions/&quot;&gt;shells, ash #5 - ash functions&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;home&quot; tabindex=&quot;-1&quot;&gt;HOME &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-06-linux-tools-shells-ash-6-environment-variables/#home&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Домашняя директория пользователя и passwd файла, переменная устанавливается командой login и используется множеством разных команд, например, командой cd без параметров для перехода в домашнюю директорию пользователя&lt;/p&gt;
&lt;p&gt;Для проверки можно запустить ash без env-переменных от root пользователя и выполнить команду login&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;## запускаем ash без env-параметров текущего shell и под root&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;## root - нужен для запуска login,&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;## иначе будет ошибка login: must be suid to work properly&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-i&lt;/span&gt; /usr/bin/ash

&lt;span class=&quot;token comment&quot;&gt;## далее одинарная решетка это prompt root пользователя&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# env&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;SHLVL&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/sbin:/usr/sbin:/bin:/usr/bin
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PWD&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/ubuntu

&lt;span class=&quot;token comment&quot;&gt;# login -f ubuntu&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;## ...&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/ubuntu/bin:/home/ubuntu/.local/bin:/data/bin:/bin:/usr/bin
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PWD&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/ubuntu
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;SHLVL&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;USER&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;ubuntu
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;HOME&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/ubuntu
&lt;span class=&quot;token comment&quot;&gt;## ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;path&quot; tabindex=&quot;-1&quot;&gt;PATH &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-06-linux-tools-shells-ash-6-environment-variables/#path&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Список директорий разделенный двоеточиями&lt;/p&gt;
&lt;p&gt;В этих директориях shell ищет программы, подробнее процесс поиска мы рассмотрели &lt;a href=&quot;https://rootaround.github.io/posts/blog/2021-01-linux-tools-shells-part-5-ash-complex-commands/#command-types-programs&quot;&gt;в статье с выполнением команд&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;cdpath&quot; tabindex=&quot;-1&quot;&gt;CDPATH &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-06-linux-tools-shells-ash-6-environment-variables/#cdpath&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Путь относительно которого работает команда cd&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# задаем CDPATH=/home/ubuntu&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;CDPATH&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/ubuntu

$ &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt;
/home/ubuntu

&lt;span class=&quot;token comment&quot;&gt;# теперь все относительные пути без указания первого слэша&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# будут считаться относительно /home/ubuntu&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; tmp
&lt;span class=&quot;token comment&quot;&gt;# мы в /home/ubuntu/tmp - если такая директория существует&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;mail&quot; tabindex=&quot;-1&quot;&gt;MAIL &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-06-linux-tools-shells-ash-6-environment-variables/#mail&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Следующие 3 env-переменных нужны для проверки почты, точнее в самом shell реализовано слежение за изменением в файле&lt;/p&gt;
&lt;p&gt;в MAIL может содержаться путь к файлу, за изменениями которого нужно следить&lt;/p&gt;
&lt;h2 id=&quot;mailcheck&quot; tabindex=&quot;-1&quot;&gt;MAILCHECK &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-06-linux-tools-shells-ash-6-environment-variables/#mailcheck&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;в MAILCHECK устанавливается время в секундах, через сколько нужно проверять файл или файлы указанные в MAIL или MAILPATH&lt;/p&gt;
&lt;p&gt;По умолчанию = 60&lt;/p&gt;
&lt;p&gt;Если поставить 0, то проверка будет происходит после каждого выполнения команды, В доке формулируется так “If set to 0, the check will occur at each prompt”, то есть при каждом показе приглашения к вводу команды.&lt;/p&gt;
&lt;h2 id=&quot;mailpath&quot; tabindex=&quot;-1&quot;&gt;MAILPATH &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-06-linux-tools-shells-ash-6-environment-variables/#mailpath&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;в MAILPATH через двоеточие &lt;code&gt;:&lt;/code&gt; может быть указано несколько файлов, которые нужно проверять&lt;/p&gt;
&lt;p&gt;если указан MAILPATH, то MAIL игнорируется.&lt;/p&gt;
&lt;p&gt;работает это так&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; ~/mail.txt
$ &lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;MAILPATH&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/ubuntu/mail.txt
$ &lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;MAILCHECK&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# меняем файл, в случае почтовых программ они меняют файл&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# и bash видимо умеет их парсить и выводить даже количество писем&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; ~/mail.txt

&lt;span class=&quot;token comment&quot;&gt;# далее после выполнения команды или просто пустой строки ash выведет&lt;/span&gt;
$
you have mail
$
&lt;span class=&quot;token comment&quot;&gt;# то есть проверка происходит перед показом prompt&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;ps1&quot; tabindex=&quot;-1&quot;&gt;PS1 &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-06-linux-tools-shells-ash-6-environment-variables/#ps1&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Prompt String - это основная подсказка к вводу команды и по умолчанию для обычного пользователя это переменная равна &lt;code&gt;$ &lt;/code&gt; (доллар и пробел), для суперпользователя root &lt;code&gt;# &lt;/code&gt; (решетка и пробел)&lt;/p&gt;
&lt;p&gt;значение может содержать не специальные последовательности&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# например, по умолчанию PS1 в ash выводит еще и текущую директорию&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# сейчас мы в домашней директории&lt;/span&gt;
~ $

&lt;span class=&quot;token comment&quot;&gt;# а переменная равна&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token environment constant&quot;&gt;$PS1&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;w &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;$&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Подробнее про эти опции поговорим в статьях про bash&lt;/p&gt;
&lt;h2 id=&quot;ps2&quot; tabindex=&quot;-1&quot;&gt;PS2 &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-06-linux-tools-shells-ash-6-environment-variables/#ps2&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Подсказка ввода для многострочных команд. По умолчанию &lt;code&gt;&amp;gt; &lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ (
&amp;gt; echo 123
&amp;gt; )
123
$
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;ps3&quot; tabindex=&quot;-1&quot;&gt;PS3 &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-06-linux-tools-shells-ash-6-environment-variables/#ps3&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Почему-то не описано в документации, возможно в ash не используется&lt;/p&gt;
&lt;h2 id=&quot;ps4&quot; tabindex=&quot;-1&quot;&gt;PS4 &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-06-linux-tools-shells-ash-6-environment-variables/#ps4&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;В случае если включена трассировка опцией &lt;code&gt;-x&lt;/code&gt;, перед каждой выполненной командой выводится значение PS4&lt;/p&gt;
&lt;p&gt;По умолчанию равно &lt;code&gt;+ &lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-x&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
+ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
+ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
$&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;ifs&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;IFS&quot; href=&quot;https://rootaround.github.io/2021-06-linux-tools-shells-ash-6-environment-variables/#IFS&quot;&gt;&lt;/a&gt; IFS &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-06-linux-tools-shells-ash-6-environment-variables/#ifs&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Input Field Separators&lt;/p&gt;
&lt;p&gt;Разделители при чтении и выводе параметров - подробнее разберем в следующей статье про Special Parameters (здесь будет ссылка на статью)&lt;/p&gt;
&lt;h2 id=&quot;term&quot; tabindex=&quot;-1&quot;&gt;TERM &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-06-linux-tools-shells-ash-6-environment-variables/#term&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;В переменной содержится название текущего терминала, и используется программами для определения возможностей терминала, например, программа может определить поддерживает ли терминал цвета (xterm или xterm-256color)&lt;/p&gt;
&lt;h2 id=&quot;histsize&quot; tabindex=&quot;-1&quot;&gt;HISTSIZE &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-06-linux-tools-shells-ash-6-environment-variables/#histsize&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Сколько команд хранить в истории shell’a (это переключение истории команд стрелками)&lt;/p&gt;
&lt;p&gt;По умолчанию равно 15&lt;/p&gt;
&lt;h2 id=&quot;pwd&quot; tabindex=&quot;-1&quot;&gt;PWD &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-06-linux-tools-shells-ash-6-environment-variables/#pwd&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Текущая директория, эту переменную меняет команда cd&lt;/p&gt;
&lt;h2 id=&quot;oldpwd&quot; tabindex=&quot;-1&quot;&gt;OLDPWD &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-06-linux-tools-shells-ash-6-environment-variables/#oldpwd&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Предыдущая директория&lt;/p&gt;
&lt;h2 id=&quot;ppid&quot; tabindex=&quot;-1&quot;&gt;PPID &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-06-linux-tools-shells-ash-6-environment-variables/#ppid&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ID процесса текущего shell&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token environment constant&quot;&gt;$PPID&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1527&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&quot;itogo&quot; tabindex=&quot;-1&quot;&gt;Итого &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-06-linux-tools-shells-ash-6-environment-variables/#itogo&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;В статье разобрали все возможные Environment Variables в ash, больше переменных и логики будет в bash&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Предыдущая статья: &lt;a href=&quot;https://rootaround.github.io/posts/blog/2021-01-linux-tools-shells-part-6-ash-functions/&quot;&gt;shells, ash #5 - ash functions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&quot;ssylki&quot; tabindex=&quot;-1&quot;&gt;Ссылки &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-06-linux-tools-shells-ash-6-environment-variables/#ssylki&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://man7.org/linux/man-pages/man1/dash.1.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://man7.org/linux/man-pages/man1/dash.1.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://man7.org/linux/man-pages/man1/login.1.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://man7.org/linux/man-pages/man1/login.1.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mandober/enwars#mail&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mandober/enwars#mail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://unix.stackexchange.com/questions/528323/what-uses-the-term-variable&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://unix.stackexchange.com/questions/528323/what-uses-the-term-variable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://rootaround.github.io/tags/linux-tools&quot;&gt;Все статьи серии “Linux Tools”&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Linux Tools: shells, ash #5 - ash syntax, functions</title>
		<link href="https://rootaround.github.io/2021-01-linux-tools-shells-part-6-ash-functions/"/>
		<updated>2021-01-20T19:03:00Z</updated>
		<id>https://rootaround.github.io/2021-01-linux-tools-shells-part-6-ash-functions/</id>
		<content type="html">&lt;p&gt;В прошлой статье прошли по сложным командам, циклам и условиям. Теперь усложняем. Что если нужно выполнять много сложных команд и еще хочется переиспользовать некоторые части команд?&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;На помощь приходят функции&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function-name function&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;command&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
  &lt;span class=&quot;token builtin class-name&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;exitstatus&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Функции могут содержать всего одну команду и записываться без фигурных скобок&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ hello&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello&#39;&lt;/span&gt;
$ hello
Hello&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Или несколько команд&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function-name function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello&#39;&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;World&#39;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
$ hello
Hello
World&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Каждая функция работает как обычная команда-программа и возвращает exit-код. По умолчанию возвращается 0, но можно вернуть нужный exit-код c помощью return. При этом выполнение функции прекращается на return.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function-name function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello&#39;&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;World&#39;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# World не выводится&lt;/span&gt;
$ hello
Hello

&lt;span class=&quot;token comment&quot;&gt;# $? содержит exit-код предыдущей команды&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$?&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;parametry-i-peremennye&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;parameters-variables&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-6-ash-functions/#parameters-variables&quot;&gt;&lt;/a&gt; Параметры и переменные &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-6-ash-functions/#parametry-i-peremennye&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;В 3 статье серии мы уже немного &lt;a href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-3-ash-commands/#variables&quot;&gt;говорили о переменных&lt;/a&gt;, сегодня разберемся с ними подробно.&lt;/p&gt;
&lt;p&gt;Параметры (Parameters) могут позиционными и специальными, а параметры с именем называются переменными (Variables).&lt;/p&gt;
&lt;h3 id=&quot;poziczionnye-parametry-positional-parameters&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;postional-parameters&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-6-ash-functions/#postional-parameters&quot;&gt;&lt;/a&gt; Позиционные параметры - Positional Parameters &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-6-ash-functions/#poziczionnye-parametry-positional-parameters&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;При запуске скрипта все параметры перечисленные после команды являются позиционными параметрами и ash позволяет обращаться к ним по номерам, начиная с 1.&lt;/p&gt;
&lt;p&gt;В параметре &lt;code&gt;$0&lt;/code&gt; хранится путь к текущему скрипту или путь к shell, если запущен интерактивный режим&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# параметр $0 самого shell хранит путь к shell-программе&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$0&lt;/span&gt;
/usr/bin/ash

$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; ./test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$0=&#39;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$0&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$1=&#39;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$2=&#39;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$2&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# передаем пару параметров скрипту test.sh&lt;/span&gt;
$ ash ./test.sh first second
&lt;span class=&quot;token variable&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;./test.sh
&lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;first
&lt;span class=&quot;token variable&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;second&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Точно такая же логика с позиционными параметрами работает и для функций. В &lt;code&gt;$0&lt;/code&gt; будет содержаться путь к shell, а параметры в функции можно передавать аналогично скриптам&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function-name function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$0=&#39;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello, &lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

$ hello World
&lt;span class=&quot;token variable&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/usr/bin/ash
Hello, World&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Позиционные параметры в скриптах и функциях можно переопределять с помощью builtin-команды &lt;code&gt;set&lt;/code&gt; (подробно синтаксис set разберем в отдельной статье про builtin-команды)&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function-name function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello, &lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt; and &lt;span class=&quot;token variable&quot;&gt;$2&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; Beavis Butthead&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello, &lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt; and &lt;span class=&quot;token variable&quot;&gt;$2&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

$ hello Rick Morty
Hello, Rick and Morty
Hello, Beavis and Butthead&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;peremennye-variables&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;variables&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-6-ash-functions/#variables&quot;&gt;&lt;/a&gt; Переменные - Variables &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-6-ash-functions/#peremennye-variables&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Shell-переменные можно использовать внутри скриптов для хранения значений&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token assign-left variable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
$ &lt;span class=&quot;token assign-left variable&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
$ &lt;span class=&quot;token assign-left variable&quot;&gt;TEST&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100500&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$a&lt;/span&gt;-&lt;span class=&quot;token variable&quot;&gt;$b&lt;/span&gt;-&lt;span class=&quot;token variable&quot;&gt;$TEST&lt;/span&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;-2-100500&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Но эти параметры не передаются при вызовах команд в environment-переменные, можно делать вручную задавать environment-переменные для каждой команды&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; ./test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$TEST=&#39;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$TEST&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# переменная TEST будет пуста&lt;/span&gt;
$ ./test.sh
&lt;span class=&quot;token variable&quot;&gt;$TEST&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# передаем значение переменной TEST на момент вызова&lt;/span&gt;
$ &lt;span class=&quot;token assign-left variable&quot;&gt;TEST&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; ./test.sh
&lt;span class=&quot;token variable&quot;&gt;$TEST&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Для того чтобы shell-переменные передавались в окружение (environment) всем выполняемым командам, нужно экспортировать переменную&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;TEST&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100500&lt;/span&gt;

$ ./test.sh
&lt;span class=&quot;token variable&quot;&gt;$TEST&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100500&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;peremennye-v-funkcziyah&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;function-variables&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-6-ash-functions/#function-variables&quot;&gt;&lt;/a&gt; Переменные в функциях &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-6-ash-functions/#peremennye-v-funkcziyah&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;В функциях видны все shell-переменные (и environment-переменные тоже) — их можно использовать внутри.&lt;/p&gt;
&lt;p&gt;Также все команды, выполненные внутри функций влияют на shell, в общем все точно также как и при выполнении обычных команд без функции. Чтобы команды не влияли на текущий shell можно &lt;a href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#grouping-parentheses&quot;&gt;группировать их в круглых скобках &lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;lokalnye-peremennye-v-funkcziyah&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;local-function-variables&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-6-ash-functions/#local-function-variables&quot;&gt;&lt;/a&gt; Локальные переменные в функциях &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-6-ash-functions/#lokalnye-peremennye-v-funkcziyah&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Если определенные переменные нужны только внутри функции можно воспользоваться builtin-функцией local.&lt;/p&gt;
&lt;p&gt;Команда &lt;code&gt;local&lt;/code&gt; должна быть вызвана в начале функции и должна содержать имя локальной переменной. Локальные переменные никак не инициализируются и задавать значения им нужно отдельно.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# в shell своя переменная name&lt;/span&gt;
$ &lt;span class=&quot;token assign-left variable&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;Pachino

$ &lt;span class=&quot;token function-name function&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; name &lt;span class=&quot;token comment&quot;&gt;# в функции своя переменная name&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;local name=&#39;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$name&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;DeNiro
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;local name=&#39;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$name&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

$ hello
&lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;Pachino
&lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;DeNiro

&lt;span class=&quot;token comment&quot;&gt;# в shell переменная не поменялась&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;name=&#39;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$name&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;Pachino&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Кроме этого scope локальных переменных сохраняется при создании вложенных функций - то есть для вложенной функции будет своя переменная, а не глобальная.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token assign-left variable&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;Pachino

$ &lt;span class=&quot;token function-name function&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; name
  &lt;span class=&quot;token assign-left variable&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;DeNiro
  &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;name=&#39;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$name&lt;/span&gt;

  &lt;span class=&quot;token function-name function&quot;&gt;bang&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bang name=&#39;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$name&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  bang
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;


$ hello
&lt;span class=&quot;token assign-left variable&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;DeNiro
&lt;span class=&quot;token comment&quot;&gt;# в функции bang переиспользуется локальная переменная name&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# из функции hello&lt;/span&gt;
bang &lt;span class=&quot;token assign-left variable&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;DeNiro

&lt;span class=&quot;token comment&quot;&gt;# в shell осталась своя переменная&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$name&lt;/span&gt;
Pachino&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вместо имени переменной в &lt;code&gt;local&lt;/code&gt; можно указать &lt;code&gt;-&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function-name function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt; -
&lt;span class=&quot;token comment&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В этом случае все установленные опции с помощью команды &lt;code&gt;set&lt;/code&gt; будут локальными и вернуться к своим значениям при выходе из функции. Про установку опций с помощью &lt;code&gt;set&lt;/code&gt; говорили во &lt;a href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#xtrace-arg-adv&quot;&gt;2 статье серии&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;potoki-v-funkcziyah&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;function-streams&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-6-ash-functions/#function-streams&quot;&gt;&lt;/a&gt; Потоки в функциях &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-6-ash-functions/#potoki-v-funkcziyah&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Раз функция ведет себя как команда, значит внутри нее можно работать с потоками и использовать функции в пайплайнах&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# передаем в cat данные из stdin-потока&lt;/span&gt;
$ hello &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;World&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; hello
Hello
World&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;stdout и stderr- потоки у функции также свои&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function-name function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;World&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

$ hello
Hello
World

&lt;span class=&quot;token comment&quot;&gt;# перенаправляем stderr в /dev/null&lt;/span&gt;
$ hello &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;/dev/null
Hello&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h1 id=&quot;itogo&quot; tabindex=&quot;-1&quot;&gt;Итого &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-6-ash-functions/#itogo&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Сегодня узнали как создавать shell-функции и как использовать параметры, потоки и переменные внутри shell-функций.&lt;/p&gt;
&lt;p&gt;Основной функционал ash мы рассмотрели, но существует несколько возможностей, которые делают написание скриптов еще удобнее – их и обсудим в следующей статье.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Предыдущая статья: &lt;a href=&quot;https://rootaround.github.io/posts/blog/2021-01-linux-tools-shells-part-5-ash-complex-commands/&quot;&gt;shells, ash #4 - ash syntax, complex commands, pipelines, conditions and loops&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Следующая статья: &lt;a href=&quot;https://rootaround.github.io/posts/blog/2021-06-linux-tools-shells-ash-6-environment-variables/&quot;&gt;shells, ash #6 - environment variables&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&quot;ssylki&quot; tabindex=&quot;-1&quot;&gt;Ссылки &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-6-ash-functions/#ssylki&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://man7.org/linux/man-pages/man1/dash.1.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://man7.org/linux/man-pages/man1/dash.1.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://rootaround.github.io/tags/linux-tools&quot;&gt;Все статьи серии “Linux Tools”&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Linux Tools: shells, ash #4 - ash syntax, complex commands, pipelines, conditions and loops</title>
		<link href="https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/"/>
		<updated>2021-01-13T08:00:00Z</updated>
		<id>https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/</id>
		<content type="html">&lt;p&gt;В предыдущей статье изучили как работает перенаправление потоков, сегодня начнем разбираться как выполнять комбинации команд, но сперва обсудим какие могут быть команды.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Предыдущая статья: &lt;a href=&quot;https://rootaround.github.io/posts/blog/2021-01-linux-tools-shells-part-4-ash-redirections/&quot;&gt;shells, ash #3 - ash syntax, redirections&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Следующая статья: &lt;a href=&quot;https://rootaround.github.io/posts/blog/2021-01-linux-tools-shells-part-6-ash-functions/&quot;&gt;shells, ash #5 - ash syntax, functions
&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;tipy-komand&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;command-types&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#command-types&quot;&gt;&lt;/a&gt; Типы команд &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#tipy-komand&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;В ash существуют 3 типа команд: shell-функции, buildin-команды и программы. При выполнении осуществляется поиск команды именно в таком порядке.&lt;/p&gt;
&lt;h2 id=&quot;vypolnenie-shell-funkczij&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;command-types-shell-functions&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#command-types-shell-functions&quot;&gt;&lt;/a&gt; Выполнение shell-функций &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#vypolnenie-shell-funkczij&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Все аргументы переданные с вызовом функции, передаются в функцию. Все environment-переменные также доступны внутри функции. Сама функция выполняется в текущем шелле.
Сейчас важно то что функции также как можно использовать также как и команды-программы и builtin-функции, то есть создавать комбинации из функций и команд.&lt;/p&gt;
&lt;p&gt;Функции рассмотрим в следующих статьях. Сейчас небольшой пример использования&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ hello &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello, &lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# stdout можно перенаправить&lt;/span&gt;
$ hello Kenneth &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; ./tmp.txt
&lt;span class=&quot;token comment&quot;&gt;# или использовать в пайплайнах&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#  - пайплайны разберем в этой статье&lt;/span&gt;
$ hello Kenneth &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt;
hello, Kenneth&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;vypolnenie-builtin-komand&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;command-types-builtin&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#command-types-builtin&quot;&gt;&lt;/a&gt; Выполнение builtin-команд &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#vypolnenie-builtin-komand&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;builtin-команды выполняются внутри текущего shell, без запуска отдельного процесса.
builtin-команды в ash также разберем отдельной статьей, их достаточно много, но в общем некоторые общие команды такие как &lt;code&gt;echo&lt;/code&gt;, &lt;code&gt;ls&lt;/code&gt; и другие могут быть встроены в shell.&lt;/p&gt;
&lt;h2 id=&quot;vypolnenie-komand-programm&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;command-types-programs&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#command-types-programs&quot;&gt;&lt;/a&gt; Выполнение команд-программ &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#vypolnenie-komand-programm&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Если имя команды не является shell-функцией или builtin-командой, значит это программа в файловой системе и ее нужно найти и выполнить.&lt;/p&gt;
&lt;p&gt;Если имя команды содержит слэш &lt;code&gt;/&lt;/code&gt;, то команда сразу выполняется без поиска в файловой системе – имя команды используется как путь к программе&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ /usr/bin/htop
&lt;span class=&quot;token comment&quot;&gt;# команда запуститься сразу&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Если слэшей в имени команды нет, то происходит поиск файла программы по имени в директориях из environment-переменной PATH.&lt;/p&gt;
&lt;p&gt;В переменной PATH содержится список директорий разделенных двоеточием &lt;code&gt;:&lt;/code&gt;, конечно же переменную PATH можно изменить, установить свой список директорий или дополнить существующий.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token environment constant&quot;&gt;$PATH&lt;/span&gt;
/sbin:/usr/sbin:/bin:/usr/bin

$ &lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token environment constant&quot;&gt;$PATH&lt;/span&gt;:/home/ubuntu/bin

$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token environment constant&quot;&gt;$PATH&lt;/span&gt;
/sbin:/usr/sbin:/bin:/usr/bin:/home/ubuntu/bin&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Текущая директория (PWD) тоже может содержаться в PATH, для этого нужно указать пустую строку между двоеточиями или в конце&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# в конце строки&lt;/span&gt;
$ &lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/sbin:/bin:

&lt;span class=&quot;token comment&quot;&gt;# пустая директория&lt;/span&gt;
$ &lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/sbin:/bin::

&lt;span class=&quot;token comment&quot;&gt;# в начале строки&lt;/span&gt;
$ &lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;:/sbin:/bin&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Для выполнения будет использована первая найденная команда, то есть порядок директорий важен.&lt;/p&gt;
&lt;p&gt;Если команда не существует ни в одной директории, получим ошибку not found&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ noop
/usr/bin/ash: noop: not found&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;vypolnenie-komand-programm-1&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;command-exec&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#command-exec&quot;&gt;&lt;/a&gt; Выполнение команд-программ &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#vypolnenie-komand-programm-1&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Когда команда найдена начинается ее выполнение и тут снова возможно несколько сценариев:&lt;/p&gt;
&lt;h2 id=&quot;magic-number&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;command-exec-magic-number&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#command-exec-magic-number&quot;&gt;&lt;/a&gt; magic_number &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#magic-number&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;исполняемый файл-программа начинается с magic number. Тут имеется ввиду ELF-заголовок по которому определяется что программа может выполняться и дальше при выполнении происходит чтение из этого файла используя ELF-формат.&lt;/p&gt;
&lt;p&gt;В этом случае создается новый процесс, которому переданы все аргументы команды и переменные окружения.&lt;/p&gt;
&lt;h2 id=&quot;shebang&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;command-exec-shebang&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#command-exec-shebang&quot;&gt;&lt;/a&gt; shebang &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#shebang&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Если программа не имеет ELF-заголовка, но начинается с &lt;code&gt;#!&lt;/code&gt; программа выполняется как отдельный shell. Причем после &lt;code&gt;#!&lt;/code&gt; указывается интрепретатор и один аргумент&lt;/p&gt;
&lt;p&gt;Ситаксис&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!interprer [optional-arg]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Пример&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/usr/bin/ash&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Скрипт выше будет выполнен интерпертатором ash. Кроме shell таком образом могут выполняться программы на интерпретируемых языках программирования, например, python или php&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/usr/bin/python&lt;/span&gt;
print&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;123&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Для того чтобы выполнить скрипт как программу нужно чтобы для файла был установлен атрибут eXecutable&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; +x ./test.sh
$ ./test.sh
&lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;exit-status&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;exit-status&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#exit-status&quot;&gt;&lt;/a&gt; Exit status &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#exit-status&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;В Linux каждый процесс завершается с определенным числовым статусом, exit-статусом или exit-кодом.&lt;/p&gt;
&lt;p&gt;Если exit-код равен 0 — программа выполнена успешно, другие значения означают ошибку.
У каждой команды свой список exit-кодов и их значение можно посмотреть в документации (man) команды.&lt;/p&gt;
&lt;p&gt;Builtin-команды и shell-функции также возвращают exit-коды.&lt;/p&gt;
&lt;p&gt;Забегая немного вперед - exit-код последней выполненной команды можно посмотреть с помощью специальной shell-переменной &lt;code&gt;$?&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# ...&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$?&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В случае списков команд итоговым будет exit-код последней команды.&lt;/p&gt;
&lt;h1 id=&quot;complex-commands&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;complex-commands&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#complex-commands&quot;&gt;&lt;/a&gt; Complex Commands &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#complex-commands&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Все предыдущие разделы были необходимой подготовкой к пониманию более сложных конструкций из команд.&lt;/p&gt;
&lt;p&gt;Итак команды могут быть одним из следующих:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;простой командой (simple command)&lt;/li&gt;
&lt;li&gt;пайплайном (pipeline)&lt;/li&gt;
&lt;li&gt;списком команд (list)&lt;/li&gt;
&lt;li&gt;составной командой (compound command)&lt;/li&gt;
&lt;li&gt;определением функции (function definition)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;pipelines&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;complex-commands-pipelines&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#complex-commands-pipelines&quot;&gt;&lt;/a&gt; Pipelines &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#pipelines&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Pipeline - последовательность команд разделенных управляющим оператором &lt;code&gt;|&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Stdout каждой команды перенаправляется в stdin следующей команды, а для последней команды stdout работает как обычно. Как итоговый exit-код используется exit-код последней команды.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; abc &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
a&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В примере выше stdout команды &lt;code&gt;echo abc&lt;/code&gt; передается в stdin команды &lt;code&gt;head&lt;/code&gt;, которая берет из своего stdin только один символ.&lt;/p&gt;
&lt;p&gt;Для примера с exit-кодом не будем передавать значение аргумента &lt;code&gt;-c&lt;/code&gt;, в этом случае команда &lt;code&gt;head&lt;/code&gt; завершается с ошибкой&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; abc &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt;
head: option requires an argument -- &lt;span class=&quot;token string&quot;&gt;&#39;c&#39;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# ... сообщение об ошибке&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$?&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;&amp;lt;&amp;lt; команда завершилась с ошибкой&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Exit-код пайплайна можно инвертировать, если добавить перед пайплайном восклицательный знак &lt;code&gt;!&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; abc &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt;
head: option requires an argument -- &lt;span class=&quot;token string&quot;&gt;&#39;c&#39;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# ... сообщение об ошибке&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$?&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Для каждой команды можно использовать операторы перенаправления. Для примера возьмем вывод команды &lt;code&gt;head -c&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt;
head: option requires an argument -- &lt;span class=&quot;token string&quot;&gt;&#39;c&#39;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;head -c&lt;/code&gt; передает stdout команде &lt;code&gt;cat&lt;/code&gt;, а уже stdout команды &lt;code&gt;cat&lt;/code&gt; выводится в терминал&lt;/p&gt;
&lt;p&gt;Если перенаправить результат cat в /dev/null …&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; /dev/null
head: option requires an argument -- &lt;span class=&quot;token string&quot;&gt;&#39;c&#39;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… то ничего не поменяется, потому что текст ошибки выводится в stderr-поток, тут мы можем использовать перенаправление — перенаправляем stderr в stdout — в итоге и stderr и stdout команды &lt;code&gt;head&lt;/code&gt; попадают в stdin команды &lt;code&gt;cat&lt;/code&gt;, а потом в /dev/null&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; /dev/null&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;spiski-lists&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;lists&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#lists&quot;&gt;&lt;/a&gt; Списки - Lists &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#spiski-lists&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Для последовательного выполнения команд без перенаправления потоков существуют списки команд.&lt;/p&gt;
&lt;h2 id=&quot;simple-list&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;simple-lists&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#simple-lists&quot;&gt;&lt;/a&gt; Simple List - &lt;code&gt;;&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#simple-list&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Самы простой вариант составить список без связи команд это использовать между командами &lt;code&gt;;&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Команды будут выполнены последовательно одна за другой в указанном порядке, при этом даже если первая команда завершится с ненулевым exit-кодом, остальные все равно будут выполнены.&lt;/p&gt;
&lt;h2 id=&quot;and-list-and-and&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;and-lists&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#and-lists&quot;&gt;&lt;/a&gt; AND-List - &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#and-list-and-and&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Для того чтобы команды выполнялись только в случае успешного завершения предыдущей команды используют оператор &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;В этом случае следующая команда будет выполнена только если предыдущая завершилась с exit-кодом равным 0.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# есть текстовый файл abc.txt, в котором содержатся 3 символа &#39;abc&#39;&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; abc.txt
abc

&lt;span class=&quot;token comment&quot;&gt;# составляем список команд команд:&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# - head читает один символ из файла&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# - echo выводит &#39;- first char in file&#39;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#   если предыдущая команда завершилась успешно&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;abc.txt &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; - first char in file&#39;&lt;/span&gt;
a - first char &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# head выполнилась успешно и затем выполнилась команда echo&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# если убрать число символов в команде head - возникнет ошибка -&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# head завершится с exit-кодом 1 и echo не будет выполнено&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;abc.txt &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; - first char in file&#39;&lt;/span&gt;
head: option requires an argument -- &lt;span class=&quot;token string&quot;&gt;&#39;c&#39;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;or-list&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;or-lists&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#or-lists&quot;&gt;&lt;/a&gt; OR-List - &lt;code&gt;||&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#or-list&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;В OR-List команда следующая за оператором &lt;code&gt;||&lt;/code&gt; выполняется только если exit-код предыдущей команды больше 0.&lt;/p&gt;
&lt;p&gt;Возьмем последнюю команду из предыдущего примера и немного изменим&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# убираем значение аргумента -с&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# меняем &amp;amp;&amp;amp; на ||&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# меняем текст сообщения&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;abc.txt &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;it is failed&#39;&lt;/span&gt;
head: option requires an argument -- &lt;span class=&quot;token string&quot;&gt;&#39;c&#39;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# ...&lt;/span&gt;
it is failed

&lt;span class=&quot;token comment&quot;&gt;# echo выполнилось потому что exit-код первой команды больше 0&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# если исправить первую команду - echo перестанет выполняться&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;abc.txt &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;it is failed&#39;&lt;/span&gt;
a&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;gruppirovka-spiskov-komand&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;grouping&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#grouping&quot;&gt;&lt;/a&gt; Группировка списков команд &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#gruppirovka-spiskov-komand&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Команды могут быть сгруппированы двумя способами:&lt;/p&gt;
&lt;h2 id=&quot;pervyj-ispolzuya-kruglye-skobki&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;grouping-parentheses&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#grouping-parentheses&quot;&gt;&lt;/a&gt; Первый - используя круглые скобки &lt;code&gt;()&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#pervyj-ispolzuya-kruglye-skobki&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;В этом случае команды будут выполнены в отдельном shell и команды не будут влиять на текущий shell&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;echo &lt;span class=&quot;token string&quot;&gt;&#39;abc&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
a

$ &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;export &lt;span class=&quot;token assign-left variable&quot;&gt;TEST&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# переменная TEST не появится в текущем shell&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;vtoroj-sposob-figurnye-skobki&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;grouping-curly&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#grouping-curly&quot;&gt;&lt;/a&gt; Второй способ - фигурные скобки - &lt;code&gt;{}&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#vtoroj-sposob-figurnye-skobki&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Этот способ также как и первый позволяет сгруппировать stdout списка команд, как будто это одна команда, но команды выполняются в текущем shell.&lt;/p&gt;
&lt;p&gt;Первое обязательное условие этого способа - это наличие пробелов после первой и перед второй фигурными скобок.
Вторым обязательным условием является наличие точки с запятой &lt;code&gt;;&lt;/code&gt; перед второй, завершающей скобкой &lt;code&gt;}&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# также можно использовать другие списки, пайплайны&lt;/span&gt;
$ &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;abc&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
a&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;uslovnye-konstrukczii-i-czikly&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;conditions-and-loops&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#conditions-and-loops&quot;&gt;&lt;/a&gt; Условные конструкции и циклы &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#uslovnye-konstrukczii-i-czikly&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;С этого момента простое выполнение команд начинает превращаться в shell-программирование 😃&lt;/p&gt;
&lt;h2 id=&quot;if-then&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;if&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#if&quot;&gt;&lt;/a&gt; if … then &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#if-then&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Синтаксис&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; list
&lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; list
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;elif&lt;/span&gt; list
&lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;    list &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; list &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Если list в &lt;code&gt;if&lt;/code&gt; завершается с exit-кодом 0 - выполняется первый &lt;code&gt;then list&lt;/code&gt;, а если exit-код больше 0 и есть &lt;code&gt;else list&lt;/code&gt; - то будет выполнен он, аналогично для &lt;code&gt;elif .. then&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Все что после if, then, else, elif является просто списками команд.&lt;/p&gt;
&lt;p&gt;Единственным условием является разделение списка команд от служебных слов с помощью переноса строки, либо точкой с запятой &lt;code&gt;;&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# то же самое в одну строку&lt;/span&gt;
$ &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# чуть более сложно выглядящий пример&lt;/span&gt;
$ &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# первый список команд завершается с exit-кодом больше 0&lt;/span&gt;
$ &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; /nowhere &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;/dev/null &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;good&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bad&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
bad
&lt;span class=&quot;token comment&quot;&gt;# выполнился else&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В примерах мы видим stdout всех выполняющихся команд. Если значения stdout или stderr не нужны - их нужно перенаправлять в файлы или в /dev/null.&lt;/p&gt;
&lt;p&gt;После описания синтаксиса и примеров может возникнуть вопрос про условия в квадратных скобках&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token assign-left variable&quot;&gt;TEST&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;
$ &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$TEST&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;100&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;good&#39;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bad&#39;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Разве квадратные скобки не являются частью синтаксиса?&lt;/p&gt;
&lt;p&gt;Нет, не являются. И это одна из “магических” штук, которые с ходу кажутся простыми, но в итоге могут работать не так как ожидаешь.&lt;/p&gt;
&lt;p&gt;Оказывается открывающяя скобка &lt;code&gt;[&lt;/code&gt; это команда &lt;code&gt;test&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Документация по &lt;code&gt;man [&lt;/code&gt; и &lt;code&gt;man test&lt;/code&gt; будет содержать одинаковую информацию.&lt;/p&gt;
&lt;p&gt;Если поискать такую команду с помощью &lt;code&gt;which&lt;/code&gt; (which определяет где хранится команда на файловой системе используя PATH)&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
/usr/bin/&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Закрывающая скобка &lt;code&gt;]&lt;/code&gt; является обязательным завершающим аргументом для команды &lt;code&gt;[&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
ash: missing &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Конкретно в случае ash команды &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt; и некоторые другие являются builtin-командами, мы разберем их через пару статей этой серии.&lt;/p&gt;
&lt;p&gt;Теперь &lt;code&gt;if&lt;/code&gt; конструкция с квадратными скобками …&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$TEST&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;100&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;good&#39;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… просто преобразуется в список из одной команды&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$TEST&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;100&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;good&#39;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;и точка с запятой в конце нужна чтобы разделить аргументы команды &lt;code&gt;test&lt;/code&gt; от служебного слова &lt;code&gt;then&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;while&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;while&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#while&quot;&gt;&lt;/a&gt; while &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#while&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;C циклом &lt;code&gt;while&lt;/code&gt; все еще проще чем &lt;code&gt;if&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Синтаксис&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; list
&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; list
&lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Пока список команд после &lt;code&gt;while&lt;/code&gt; завершается с exit-code равным 0 выполняется список команд после &lt;code&gt;do&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;.txt
$ &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;.txt &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;/dev/null &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;1&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;has file&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;.txt
&lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;
has &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# has file - выводится один раз и после этого следует выход из цикла&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;until&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;until&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#until&quot;&gt;&lt;/a&gt; until &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#until&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;until&lt;/code&gt; работает аналогично &lt;code&gt;while&lt;/code&gt;, только цикл выполняется пока exit-код первого списка команд &lt;strong&gt;не равен&lt;/strong&gt; 0.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# пока нет файла 2.txt цикл будет работать&lt;/span&gt;
$ &lt;span class=&quot;token keyword&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;.txt &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;/dev/null &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;1&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;has no file&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;.txt &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;

has no &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;for&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;for&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#for&quot;&gt;&lt;/a&gt; for &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#for&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ситаксис&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; variable &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; word &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;   list
&lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Цикл &lt;code&gt;for&lt;/code&gt; позволяет перебирать список слов и на каждом шаге что-то выполнять с элементом&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token for-or-select variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;i = &lt;span class=&quot;token variable&quot;&gt;$i&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;
i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;С возможность подстановки результата команды (command substitution) - &lt;code&gt;$(command)&lt;/code&gt; - цикл &lt;code&gt;for&lt;/code&gt; позволяет перебирать все что угодно. Command substitution и другие полезные возможности рассмотрим в следующей статье.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# команда ls выдает список файлов в текущей директории&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# выдает в строку разделенные пробелами&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;.txt &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;.txt &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;.txt

&lt;span class=&quot;token comment&quot;&gt;# используя for и command substitution&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# можем перебрать в цикле список файлов&lt;/span&gt;
$ &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token for-or-select variable&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;file = &lt;span class=&quot;token variable&quot;&gt;$file&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;.txt
&lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;.txt
&lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;.txt&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;break-continue&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;break-continue&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#break-continue&quot;&gt;&lt;/a&gt; break, continue &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#break-continue&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;синтаксис&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt; - прерывает цикл &lt;code&gt;for&lt;/code&gt; или &lt;code&gt;while&lt;/code&gt; (&lt;code&gt;until&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;continue&lt;/code&gt; - переход на следующую итерацию цикла&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Если есть вложенные циклы, то можно указывая n применять &lt;code&gt;break&lt;/code&gt; или &lt;code&gt;continue&lt;/code&gt; для нескольких циклов&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token for-or-select variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token for-or-select variable&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; a b c&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$i&lt;/span&gt; - &lt;span class=&quot;token variable&quot;&gt;$j&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; - a
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; - a
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; - a
&lt;span class=&quot;token comment&quot;&gt;# каждый раз второй цикл будет прерываться на первой итерации&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# если поменять на break 2 то будет выведено только 1 - a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;case&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;case&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#case&quot;&gt;&lt;/a&gt; case &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#case&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Синтаксис&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; word &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;pattern&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; list &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
&lt;span class=&quot;token keyword&quot;&gt;esac&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Проверяет соответствие word одному или нескольким паттернам, выполняется список команд у паттерна, который совпадает первым.&lt;/p&gt;
&lt;p&gt;завершающий &lt;code&gt;esac&lt;/code&gt; это &lt;code&gt;case&lt;/code&gt; наоборот, также как &lt;code&gt;if&lt;/code&gt; и &lt;code&gt;fi&lt;/code&gt;, кто-то придумал - так и осталось (или там какая-то другая история) 😃&lt;/p&gt;
&lt;p&gt;В самом простом виде в &lt;code&gt;case&lt;/code&gt; можно выполнять команды или устанавливать переменные или и то и другое вместе&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;1&#39;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;2&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;esac&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Первую круглую скобку можно опустить. Кроме указания полных значений можно использовать Shell Patterns.&lt;/p&gt;
&lt;p&gt;Shell patterns позволяют указывать паттерны нестрогого соответствия для строк.&lt;/p&gt;
&lt;p&gt;В Shell Patterns могут использоваться мета-символы &lt;code&gt;! * ? [&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;case-asterisk&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#case-asterisk&quot;&gt;&lt;/a&gt; &lt;code&gt;*&lt;/code&gt; - соответвует любой последовательности символов, можно использовать как &lt;code&gt;case&lt;/code&gt; по умолчанию.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
*&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;default&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;esac&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id=&quot;case-question&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#case-question&quot;&gt;&lt;/a&gt; &lt;code&gt;?&lt;/code&gt; - соответствует одному любому символу&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;??&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;100 or 1??&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;esac&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id=&quot;case-bracket&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#case-bracket&quot;&gt;&lt;/a&gt; &lt;code&gt;[&lt;/code&gt; - позволяет указать класс символов, внутри можно указать конкретные символы или диапазон символов, также можно комбинировать с другими мета-символами&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a100
&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;ab&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;-9&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;*&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ab1-9&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;esac&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cимволы &lt;code&gt;]&lt;/code&gt; и &lt;code&gt;-&lt;/code&gt; тоже можно использовать как символы внутри последовательности. Для этого символ &lt;code&gt;]&lt;/code&gt; нужно разместить сразу после открывающей фигурной скобки &lt;code&gt;[&lt;/code&gt; (но после &lt;code&gt;!&lt;/code&gt;, если используется). Символ &lt;code&gt;-&lt;/code&gt; нужно разместить первым или последним внутри класса символов.&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;case-excl-mark&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#case-excl-mark&quot;&gt;&lt;/a&gt; &lt;code&gt;!&lt;/code&gt; - используется внутри класса символов и означает &lt;strong&gt;несоответствие&lt;/strong&gt; классу.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a100
&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;ab&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;-9&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;*&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;c1-9&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;esac&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# последний паттерн сработает и выведет c1-9 если i будет равно c100&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h1 id=&quot;itogo&quot; tabindex=&quot;-1&quot;&gt;Итого &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#itogo&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;В статье разобрались как выполняются команды, рассмотрели пайплайны, списки и группировку команд, возможности связать команды через AND-, OR- списки, условия и циклы. Вроде бы самый простой shell, но внутри еще достаточно много функционала для изучения.&lt;/p&gt;
&lt;p&gt;Дальше разберем функции и возможности работы с переменными.&lt;/p&gt;
&lt;p&gt;Следующая статья: &lt;a href=&quot;https://rootaround.github.io/posts/blog/2021-01-linux-tools-shells-part-6-ash-functions/&quot;&gt;shells, ash #5 - ash syntax, functions
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&quot;ssylki&quot; tabindex=&quot;-1&quot;&gt;Ссылки &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-5-ash-complex-commands/#ssylki&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://man7.org/linux/man-pages/man1/dash.1.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://man7.org/linux/man-pages/man1/dash.1.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ru.wikipedia.org/wiki/Executable_and_Linkable_Format&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ru.wikipedia.org/wiki/Executable_and_Linkable_Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%A8%D0%B5%D0%B1%D0%B0%D0%BD%D0%B3_(Unix)&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ru.wikipedia.org/wiki/Шебанг_(Unix)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Exit_status&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://en.wikipedia.org/wiki/Exit_status&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://rootaround.github.io/tags/linux-tools&quot;&gt;Все статьи серии “Linux Tools”&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Linux Tools: shells, ash #3 - ash syntax, redirections</title>
		<link href="https://rootaround.github.io/2021-01-linux-tools-shells-part-4-ash-redirections/"/>
		<updated>2021-01-02T20:22:00Z</updated>
		<id>https://rootaround.github.io/2021-01-linux-tools-shells-part-4-ash-redirections/</id>
		<content type="html">&lt;p&gt;Продолжаем про ash и простые команды, сегодня разберемся с потоками и перенаправлением потоков процесса.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Предыдущая статья: &lt;a href=&quot;https://rootaround.github.io/posts/blog/2020-12-linux-tools-shells-part-3-ash-commands/&quot;&gt;shells, ash #2 - ash syntax, simple commands&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Следующая статья: &lt;a href=&quot;https://rootaround.github.io/posts/blog/2021-01-linux-tools-shells-part-5-ash-complex-commands/&quot;&gt;shells, ash #4 - ash syntax, complex commands, pipelines, conditions and loops&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;В одной из предыдущих статей я немного рассказал про потоки процесса и их нумерацию:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0 - stdin - входной поток процесса, через него могут передаваться данные из другой команды&lt;/li&gt;
&lt;li&gt;1 - stdout - выходной поток процесса, в этот поток процесс может писать результаты&lt;/li&gt;
&lt;li&gt;2 - stderr - поток для ошибок и отладки&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Все перенаправления потоков, рассмотренные дальше, действуют только в рамках текущей команды или набора команд.&lt;/p&gt;
&lt;h3 id=&quot;operator-n-file&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;operator-n-to-file&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-4-ash-redirections/#operator-n-to-file&quot;&gt;&lt;/a&gt; оператор &lt;code&gt;[n]&amp;gt; file&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-4-ash-redirections/#operator-n-file&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Потоки можно перенаправлять в файлы&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 123 будет записано в файл&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# тут мы перенаправили поток stdout в файл tmp.txt&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; tmp.txt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Оператор &lt;code&gt;&amp;gt;&lt;/code&gt; позволяет перенаправить поток в файл по номеру потока. Приведенная выше команда это краткая запись команды. Полная запись выглядит так&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# перенаправляем stdout в файл tmp.txt&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;1&lt;/span&gt;&gt;&lt;/span&gt; tmp.txt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Аналогичным образом можно перенаправить stderr&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;error&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;2&lt;/span&gt;&gt;&lt;/span&gt; errors.log&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Оператор &lt;code&gt;&amp;gt;&lt;/code&gt; полностью перезаписывает содержимое файла новыми данными, если файл уже существует. Если файла нет - создает и записывает данные.&lt;/p&gt;
&lt;p&gt;Для защиты от перезаписи файлов, например, при отладке каких-то уже существующих скриптов, существует аргумент &lt;code&gt;-С&lt;/code&gt; (&lt;a href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#noclobber-arg&quot;&gt;noclobber&lt;/a&gt;), который предотвращает перезапись файла — с этим аргументом ash будет выдавать ошибку, если файл уже существует.&lt;/p&gt;
&lt;h3 id=&quot;operator-n-file-1&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;operator-n-to-stick-file&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-4-ash-redirections/#operator-n-to-stick-file&quot;&gt;&lt;/a&gt; оператор &lt;code&gt;[n]&amp;gt;| file&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-4-ash-redirections/#operator-n-file-1&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Делает все то же самое что и предыдущий оператор, но при запуске с аргументом &lt;code&gt;-C&lt;/code&gt; (&lt;a href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#noclobber-arg&quot;&gt;noclobber&lt;/a&gt;) файл все равно будет перезаписан — такой force для перенаправления потока в файл.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# скрипт записывает текст в файл с использованием оператора &gt;&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; tmp.txt

&lt;span class=&quot;token comment&quot;&gt;# выполняем - в файл tmp.txt записывается 123&lt;/span&gt;
$ ash test.sh

&lt;span class=&quot;token comment&quot;&gt;# еще раз выполняем тот же скрипт,&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# файл tmp.txt будет перезаписан с тем же текстом 123&lt;/span&gt;
$ ash test.sh

&lt;span class=&quot;token comment&quot;&gt;# с аргументом -C при перенаправлении с оператором &gt; будет ошибка&lt;/span&gt;
$ ash &lt;span class=&quot;token parameter variable&quot;&gt;-C&lt;/span&gt; test.sh
test.sh: line &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;: can&#39;t create tmp.txt: File exists

&lt;span class=&quot;token comment&quot;&gt;# если переделать оператор &gt; на &gt;|&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1234&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;|&lt;/span&gt; tmp.txt

&lt;span class=&quot;token comment&quot;&gt;# то даже с аргументом -C файл будет перезаписан&lt;/span&gt;
$ ash &lt;span class=&quot;token parameter variable&quot;&gt;-C&lt;/span&gt; test.sh&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;operator-n-file-2&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;operator-n-double-to-file&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-4-ash-redirections/#operator-n-double-to-file&quot;&gt;&lt;/a&gt; оператор &lt;code&gt;[n]&amp;gt;&amp;gt; file&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-4-ash-redirections/#operator-n-file-2&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Дописывает данные из потока в конец файла, если файла нет - то создает&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;567&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;1&lt;/span&gt;&gt;&gt;&lt;/span&gt; tmp.txt
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;890&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; tmp.txt
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; tmp.txt
&lt;span class=&quot;token number&quot;&gt;1234&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;567&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;890&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;operator-n-file-3&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;operator-n-from-file&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-4-ash-redirections/#operator-n-from-file&quot;&gt;&lt;/a&gt; оператор &lt;code&gt;[n]&amp;lt; file&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-4-ash-redirections/#operator-n-file-3&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;чтение потока из файла&lt;/p&gt;
&lt;p&gt;В основном используется для чтения stdin&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# команда cat выводит stdin&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# или содержимое файла (если указан путь к файлу)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# будет выведено содержимое stdin,&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# которое будет прочитано из файла tmp.txt&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;0&lt;/span&gt;&amp;lt;&lt;/span&gt; tmp.txt
&lt;span class=&quot;token number&quot;&gt;1234&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;567&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;890&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# сокращенная запись без указания номера потока&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; tmp.txt
&lt;span class=&quot;token comment&quot;&gt;# вывод такой же&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Оператор перенаправления может быть записан и до команды&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; tmp.txt &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# командой cat из stdin будет выведено содержимое файла tmp.txt&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;operator-n1-and-n2&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;operator-n-to-descriptor&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-4-ash-redirections/#operator-n-to-descriptor&quot;&gt;&lt;/a&gt; оператор &lt;code&gt;[n1]&amp;gt;&amp;amp;n2&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-4-ash-redirections/#operator-n1-and-n2&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Перенаправляет поток n1 (или stdout - 1 по умолчанию) в поток с номером n2&lt;/p&gt;
&lt;p&gt;Интерактивный шелл тоже процесс и у него есть свои stdin, stdout, stderr&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# пишем в stdout - поток с номером 1&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;out&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;1&lt;/span&gt;
out

&lt;span class=&quot;token comment&quot;&gt;# пишем в stderr - поток с номером 2&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;error&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;2&lt;/span&gt;
error&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вывод обеих команд будет отображен в консоли, потому что для интерактивного шелла весь вывод идет на экран.&lt;/p&gt;
&lt;p&gt;Для скриптов также можно писать отдельно в stdout и stderr&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# скрипт пишет раздельно в stdout и в stderr&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;out&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;1&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;error&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;2&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# если просто выполнить скрипт, то всё увидим в консоли&lt;/span&gt;
$ ash test.sh
out
error

&lt;span class=&quot;token comment&quot;&gt;# С помощью оператора &gt;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# мы можем перенаправить stdout и stderr в разные файлы&lt;/span&gt;
$ ash test.sh &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;1&lt;/span&gt;&gt;&lt;/span&gt; stdout.txt &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;stderr.txt
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; stdout.txt
out
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; stderr.txt
error&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Еще с помощью этого оператора можно наоборот сводить потоки, например, stdout и stderr в один файл&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ash test.sh &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;1&lt;/span&gt;&gt;&lt;/span&gt; stdout.txt
error

&lt;span class=&quot;token comment&quot;&gt;# в консоли вывелось error,&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# потому что sterr не перенаправлен и отображается в консоль&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# заворачиваем поток stderr в stdout&lt;/span&gt;
$ ash test.sh &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;1&lt;/span&gt;&gt;&lt;/span&gt; stdout.txt &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;1&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# и stdout и stderr записались в файл stdout.txt&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; stdout.txt
out
error&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;mnogostrochnye-dannye-dlya-potoka-here-document-heredoc&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;heredoc&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-4-ash-redirections/#heredoc&quot;&gt;&lt;/a&gt; Многострочные данные для потока - here-document, heredoc &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-4-ash-redirections/#mnogostrochnye-dannye-dlya-potoka-here-document-heredoc&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Во всех примерах до этого мы рассмотрели перенаправления в файл и из файла. С помощью backslash(/) можно визуально переносить строки для лучшей читаемости и перенаправить их на вход другой команде (об этом в следующих статьях). Но при этом переносы строк не будут выводится&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;very very very \
long long long \
text text text&quot;&lt;/span&gt;
very very very long long long text text text&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Для решения этой проблемы в ash существует синтаксис here-document, который в общем виде выглядит так&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[n]&amp;lt;&amp;lt; delimiter
    here-doc-text ...
delimiter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;delimiter может быть любой последовательностью символов, первый раз после указания delimiter на следующей строке должны начаться данные, после второго указания delimiter с начала строки данные завершились. Обычно delimiter указывают EOL - как аббревиатура End Of Line, но он может быть и другой последовательностью символов.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;0&lt;/span&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; EOL
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; very very very
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; long long long
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; text text text
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; EOL
very very very
long long long
text text text&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В интерактивном режиме после EOL и переноса строки shell символом &lt;code&gt;&amp;gt;&lt;/code&gt; в начале строки подсказывает что ввод команды продолжается.&lt;/p&gt;
&lt;p&gt;Для скриптов heredoc используется аналогично&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;EOL
1
2
3
EOL&lt;/span&gt;
$ ash test.sh
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Если требуется в скрипте визуально отделить содержимое heredoc, можно использовать символ табуляции и добавить оператор &lt;code&gt;&amp;lt;&amp;lt;-&lt;/code&gt; – в этом случае shell удалит все табы с начала строк&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;EOL
&amp;lt;tab&gt;1
&amp;lt;tab&gt;2
&amp;lt;tab&gt;3
EOL&lt;/span&gt;
$ ash test.sh
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Кроме этого внутри heredoc можно использовать shell-переменные&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;EOL
pwd = &lt;span class=&quot;token environment constant&quot;&gt;$PWD&lt;/span&gt;
EOL&lt;/span&gt;
$ ash test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;pwd&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; /home/ubuntu&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Чтобы текст внутри heredoc обрабатывался как обычные символы без подстановки переменных, нужно первый delimiter заключить в кавычки (двойные или одинарные)&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;EOL&#39;
pwd = $PWD
EOL&lt;/span&gt;
$ ash test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;pwd&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token environment constant&quot;&gt;$PWD&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;rabota-s-deskriptorami&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;descriptors&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-4-ash-redirections/#descriptors&quot;&gt;&lt;/a&gt; Работа с дескрипторами &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-4-ash-redirections/#rabota-s-deskriptorami&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Еще одна фича для работы с дескрипторами файлов — это возможность открыть файл в какой-то номер дескриптора, номера могут быть от 0 до 9.&lt;/p&gt;
&lt;p&gt;Для того чтобы использовать номер дескриптора в скрипте или интерактивном shell для нескольких команд нужно использовать builtin-команду exec (подробнее мы рассмотрим ее в следующих статьях).&lt;/p&gt;
&lt;p&gt;Сейчас нам нужно знать что все перенаправления выполненные в exec становятся постоянными (permanant) в рамках шелла или скрипта, то есть открытые дескрипторы можно использовать для последующих команд.&lt;/p&gt;
&lt;h3 id=&quot;operator-n-file-4&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;operator-open-descriptor&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-4-ash-redirections/#operator-open-descriptor&quot;&gt;&lt;/a&gt; оператор &lt;code&gt;[n]&amp;lt;&amp;gt; file&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-4-ash-redirections/#operator-n-file-4&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Позволяет открыть дескриптор файла на чтение и запись&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# открываем поток (дескриптор файла) с номером 3 для файла tmp.txt&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;3&lt;/span&gt;&amp;lt;&gt;&lt;/span&gt; ./tmp.txt
&lt;span class=&quot;token comment&quot;&gt;# так как команда была выполнена с помощью exec&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# дескриптор доступен для следующих команд&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;1&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;3&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;2&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;3&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;3&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;3&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; ./tmp.txt
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;operator-n&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;operator-close-descriptor&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-4-ash-redirections/#operator-close-descriptor&quot;&gt;&lt;/a&gt; оператор &lt;code&gt;[n]&amp;gt;-&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-4-ash-redirections/#operator-n&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Закрыть дескриптор файла&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# продолжая предыдущий пример&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;3&lt;/span&gt;&gt;&lt;/span&gt;-
&lt;span class=&quot;token comment&quot;&gt;# дескриптор файла tmp.txt закрыт&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# если снова открыть дескриптор,&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# то запись или чтение из файла начнется с начала&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;3&lt;/span&gt;&amp;lt;&gt;&lt;/span&gt; ./tmp.txt
&lt;span class=&quot;token comment&quot;&gt;# читаем из дескриптора 2 байта (1\n) - единицу и перенос строки&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;3&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# сейчас указатель дексриптора указывает на вторую строку (2\n)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# запишем 9&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;3&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; ./tmp.txt
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Аналогично можно работать с input с помощью операторов &lt;code&gt;[n1]&amp;lt;&amp;amp;n2&lt;/code&gt;, &lt;code&gt;[n]&amp;lt;-&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h1 id=&quot;&quot; tabindex=&quot;-1&quot;&gt;= &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-4-ash-redirections/#&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Сегодня мы разобрались с перенаправлением потоков stdin, stdout, stderr и возможностями использовать дескрипторы файлов в скриптах. В следующих статьях поговорим про сложные команды, пайпы, условия выполнения и циклы.&lt;/p&gt;
&lt;p&gt;Следующая статья: &lt;a href=&quot;https://rootaround.github.io/posts/blog/2021-01-linux-tools-shells-part-5-ash-complex-commands/&quot;&gt;shells, ash #4 - ash syntax, complex commands, pipelines, conditions and loops&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&quot;ssylki&quot; tabindex=&quot;-1&quot;&gt;Ссылки &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2021-01-linux-tools-shells-part-4-ash-redirections/#ssylki&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/Redirections.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.gnu.org/software/bash/manual/html_node/Redirections.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tldp.org/LDP/abs/html/io-redirection.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://tldp.org/LDP/abs/html/io-redirection.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://man7.org/linux/man-pages/man1/dash.1.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://man7.org/linux/man-pages/man1/dash.1.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://rootaround.github.io/tags/linux-tools&quot;&gt;Все статьи серии “Linux Tools”&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Linux Tools: shells, ash #2 - ash syntax, simple commands</title>
		<link href="https://rootaround.github.io/2020-12-linux-tools-shells-part-3-ash-commands/"/>
		<updated>2020-12-29T20:12:00Z</updated>
		<id>https://rootaround.github.io/2020-12-linux-tools-shells-part-3-ash-commands/</id>
		<content type="html">&lt;p&gt;В прошлой статье поговорили про запуск ash, в этой начнем разбираться с самым интересным - синтаксис и написание shell-скриптов. Для изучения продолжаем использовать ash из busybox.&lt;/p&gt;
&lt;!--more --&gt;
&lt;p&gt;Предыдущая статья: &lt;a href=&quot;https://rootaround.github.io/posts/blog/2020-12-linux-tools-shells-part-2-ash-startup/&quot;&gt;shells, ash #1 - ash startup and arguments&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Следующая статья: &lt;a href=&quot;https://rootaround.github.io/posts/blog/2021-01-linux-tools-shells-part-4-ash-redirections/&quot;&gt;shells, ash #3 - ash syntax, redirections&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Тут нужно сделать небольшое отступление про стандарты. Существует стандарт POSIX 1003.2, который определяет много чего, но сейчас нам важно что он определяет как должна работать командная оболочка, какие команды должны существовать, как работать.&lt;/p&gt;
&lt;p&gt;Так вот ash практически ее поддерживает судя по документации:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. is &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; the process of being changed to conform
with the POSIX &lt;span class=&quot;token number&quot;&gt;1003.2&lt;/span&gt; and &lt;span class=&quot;token number&quot;&gt;1003&lt;/span&gt;.2a specifications &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; the shell.

&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.

Only features designated by POSIX, plus a few Berkeley extensions,
are being incorporated into this shell.

&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Видимо полная реализация стандарта довольно трудоемкое (и противоречивое) занятие, поэтому даже этот шелл имеет какие-то свои нестандартные фичи. К слову у bash их еще больше и называют их bashisms, но в нем есть режим совместимости с POSIX.&lt;/p&gt;
&lt;p&gt;Возвращаемся к ash и сегодня поговорим про то как можно писать команды и какой синтаксис и удобства предоставляет нам шелл.&lt;/p&gt;
&lt;p&gt;ash читает скрипт построчно, разбивает его на слова по пробелам и табам. Дальше некоторые последовательности символов определяются как операторы. Операторы бывают двух видов:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Control operators — для объединения команд в группы, цепочки-пайпланы и условия&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;newline&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Redirection operators — для перенаправления потоков между командами и не только&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;|&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Стандартной проблемой в шеллах и в языках программирования является использование специальных символов (и последовательностей) как обычных символов – это называют экранированием (escape special chars). В ash экранирование спец символов можно сделать 3 способами:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;обратный слэш — backslash&lt;/li&gt;
&lt;li&gt;парные одинарные кавычки — matched single quotes&lt;/li&gt;
&lt;li&gt;парные двойные кавычки — matched double qoutes&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;obratnyj-slesh-backslash&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;backslash&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-3-ash-commands/#backslash&quot;&gt;&lt;/a&gt; обратный слэш — backslash &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-3-ash-commands/#obratnyj-slesh-backslash&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Backslash перед спец символом делает его обычным символом&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# команда ничего не выведет,&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# потому что точка с запятой интеретируется как разделитель команд&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# выведется точка с запятой, как обычный символ&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Кроме этого backslash перед символом конца строки (переводом строки) интерпретируется как продолжение строки&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;parnye-odinarnye-kavychki-matched-single-quotes&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;single-quotes&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-3-ash-commands/#single-quotes&quot;&gt;&lt;/a&gt; парные одинарные кавычки — matched single quotes &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-3-ash-commands/#parnye-odinarnye-kavychki-matched-single-quotes&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Все что внутри одинарных кавычек, кроме одинарных кавычек, считается обычным символом&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;amp;;|&gt;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Одинарные кавычки при необходимости можно вывести отдельно с помощью &lt;a href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-3-ash-commands/#backslash&quot;&gt;backslash&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# последняя кавычка экранирована с помощью backslash&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# и считается обычным символом&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;amp;|$&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&#39;
&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;$&#39;

$ echo &#39;&lt;/span&gt;&lt;span class=&quot;token environment constant&quot;&gt;$PATH&lt;/span&gt;&#39;
&lt;span class=&quot;token environment constant&quot;&gt;$PATH&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;parnye-dvojnye-kavychki-matched-double-qoutes&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;double-quotes&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-3-ash-commands/#double-quotes&quot;&gt;&lt;/a&gt; парные двойные кавычки — matched double qoutes &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-3-ash-commands/#parnye-dvojnye-kavychki-matched-double-qoutes&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;С двойными кавычками все немного сложнеe. Все символы внутри двойных кавычек считаются обычными, за исключением символов знака доллара (dollarsign) - &lt;code&gt;$&lt;/code&gt;, обратной кавычки (backquote) - &lt;code&gt;`&lt;/code&gt; и обратного слэша (backslash) - &lt;code&gt;\&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;backslash внутри двойных кавычек позволяет экранировать только символы: &lt;code&gt;$ ` &amp;quot; \ &amp;lt;newline&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Кратко рассмотрим зачем вообще нужны эти символы – дальше они будут разобраны подробнее.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$&lt;/code&gt; - dollarsign&lt;/p&gt;
&lt;p&gt;с помощью &lt;code&gt;$&lt;/code&gt; можно использовать shell-переменные вообще без кавычек&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token environment constant&quot;&gt;$PATH&lt;/span&gt;
/sbin:/usr/sbin:/bin:/usr/bin

&lt;span class=&quot;token comment&quot;&gt;# аналогично $ работает в двойных кавычках&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token environment constant&quot;&gt;$PATH&lt;/span&gt;&quot;&lt;/span&gt;
/sbin:/usr/sbin:/bin:/usr/bin&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;`&lt;/code&gt; - backquote&lt;/p&gt;
&lt;p&gt;команда, заключенная в обратные кавычки, выполняется и output команды подставляется вместо обратных кавычек. Работает и без двойных кавычек.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
/home/ubuntu

$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;current directory is &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;
current directory is /home/ubuntu&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;\&lt;/code&gt; - backslash&lt;/p&gt;
&lt;p&gt;работает как и раньше, экранирует символы: &lt;code&gt;$ ` &amp;quot; \ &lt;/code&gt; и backslash перед переводом строки считается продолжением строки без переноса&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;\&lt;span class=&quot;token environment constant&quot;&gt;$PWD&lt;/span&gt; = \
&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;token environment constant&quot;&gt;$PWD&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;token environment constant&quot;&gt;$PWD&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/home/ubuntu&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;kombinirovanie-raznyh-kavychek-dlya-komand-i-argumentov&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;combine-quotes&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-3-ash-commands/#combine-quotes&quot;&gt;&lt;/a&gt; Комбинирование разных кавычек для команд и аргументов &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-3-ash-commands/#kombinirovanie-raznyh-kavychek-dlya-komand-i-argumentov&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Все способы формирования можно комбинировать: использовать поочерердно разные кавычки, переменные:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; my&lt;span class=&quot;token string&quot;&gt;&#39; path is &#39;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; = &quot;&lt;/span&gt;&lt;span class=&quot;token environment constant&quot;&gt;$PWD&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;
my path is  &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; /home/ubuntu&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Главное чтобы в рамках одного аргумента строки соединялись без пробелов, иначе после пробела shell будет считать строку уже другим аргументом.&lt;/p&gt;
&lt;h2 id=&quot;komandy&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;commands&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-3-ash-commands/#commands&quot;&gt;&lt;/a&gt; Команды &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-3-ash-commands/#komandy&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Вот мы и подобрались к сути, ведь shell нужен как раз для выполнения команд.&lt;/p&gt;
&lt;p&gt;Если при обработке строки скрипта первое слово не является зарезервирванным, то ash начинает обработку этой строки как команды.&lt;/p&gt;
&lt;p&gt;Команды могут быть простыми — вызов одной команды, или сложными конструкциями из нескольких связанных команд с условиями или без. Начнем по порядку с простых команд.&lt;/p&gt;
&lt;p&gt;Для примера рассмотрим команду &lt;code&gt;env&lt;/code&gt;, которая выводит текущие переменные окружения (environment variables).&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;SHLVL&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/sbin:/usr/sbin:/bin:/usr/bin
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PWD&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/ubuntu&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Команда вывела несколько переменных окружнения:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SHLVL&lt;/code&gt; - текущий уровень “вложенности” шеллов, если в этом шелл запустить еще раз команду ash - SHLVL будет равен 2, а внутри этого шелла запустить еще один, то в нем будет SHLVL=3 и так далее&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PATH&lt;/code&gt; - пути разделенные двоеточиями где нужно искать команды — об этом поговорим чуть дальше&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PWD&lt;/code&gt; - текущая директория, в которой в данный момент мы находимся, эта env-переменная менятся при переходе между директориями командой &lt;code&gt;cd&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;neskolko-slov-pro-peremennye-variables&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;variables&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-3-ash-commands/#variables&quot;&gt;&lt;/a&gt; Несколько слов про переменные - variables &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-3-ash-commands/#neskolko-slov-pro-peremennye-variables&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Команда запускает процесс, у процесса могут быть переменные окружения (environment variables, env vars). Переменные окружения для конкретной команды можно задать непосредственно при вызове:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token assign-left variable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;SHLVL&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/sbin:/usr/sbin:/bin:/usr/bin
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PWD&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/ubuntu
&lt;span class=&quot;token assign-left variable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;&amp;lt;&amp;lt; переменная &#39;a&#39; есть в переменных окружения&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вообще и в интерактивном шелле и в скриптах все что соответствует паттертну &lt;code&gt;name=value&lt;/code&gt; с начала строки (или после служебного слова) считается переменной и если после переменных следует команда, то все эти переменные попадут в переменные окружения процесса запущенного этой командой:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token assign-left variable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Если переменные указаны без команды, то они определяются как переменные шелла - shell variables.&lt;/p&gt;
&lt;p&gt;Shell variables доступны для подстановки в самом шелле, но во все выполняемые команды передаются только environment variables.&lt;/p&gt;
&lt;p&gt;Shell-переменные (в том числе environment-переменные) можно посмотреть builtin-командой &lt;code&gt;set&lt;/code&gt;, а env-переменные командой &lt;code&gt;env&lt;/code&gt; или &lt;code&gt;export&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Несколько примеров чтобы стало понятнее&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# определяем shell-переменную my_test_var&lt;/span&gt;
$ &lt;span class=&quot;token assign-left variable&quot;&gt;my_test_var&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# смотрим что переменная определилась&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# в результатах set выводятся вообще все переменные,&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# в том числе environment variables&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PS4&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;+ &#39;&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PWD&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/home/ubuntu&#39;&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;SHLVL&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;1&#39;&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;my_test_var&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;1&#39;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;&amp;lt;&amp;lt; тут есть переменная &#39;my_test_var&#39;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# так как my_test_var еще не environment variable,&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# ее нет в выводе команды env&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;SHLVL&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/sbin:/usr/sbin:/bin:/usr/bin
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PWD&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/ubuntu

&lt;span class=&quot;token comment&quot;&gt;# но ее можно использовать в самом шелле&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;my_test_var = &#39;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$my_test_var&lt;/span&gt;
my_test_var &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# для того чтобы переменная стала environment-переменной&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# ее нужно экспортировать&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; my_test_var

&lt;span class=&quot;token comment&quot;&gt;# теперь переменная my_test_var является environment-переменной&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# и передаётся в environment всех команд запущенных в шелле&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;SHLVL&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/sbin:/usr/sbin:/bin:/usr/bin
&lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PWD&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/ubuntu
&lt;span class=&quot;token assign-left variable&quot;&gt;my_test_var&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# для конкретного вызова команды&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# environment-переменную всегда можно переопределить&lt;/span&gt;
$ &lt;span class=&quot;token assign-left variable&quot;&gt;my_test_var&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100500&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;my_test_var&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100500&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Пример показывает что все переменные доступны для подстановки внутри shell, но только environment-переменные передаются в окружение всем командам, выполняемым в shell.&lt;/p&gt;
&lt;p&gt;В названии переменных могут использоваться символы латинского алфавита, числа и символ подчеркивания, название переменной не может начинаться с числа.&lt;/p&gt;
&lt;p&gt;Для более явного разделения переменных существует негласное правило:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;environment-переменные пишутся заглавными буквами, а обычные shell-переменные строчными&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# PATH - environment-переменная&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token environment constant&quot;&gt;$PATH&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# my_test_var - обычная shell-переменная&lt;/span&gt;
$ &lt;span class=&quot;token assign-left variable&quot;&gt;my_test_var&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h1 id=&quot;itogo&quot; tabindex=&quot;-1&quot;&gt;Итого &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-3-ash-commands/#itogo&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Сегодня начали разбирать синтаксис и посмотрели как можно писать команды и аргументы с помощью кавычек, как формируется команда, как работать с переменными в общем и с переменными окружения в частности. В следующей статье разберемся как управлять перенаправлением потоков stdin, stdout и stderr с помощью redirection operators.&lt;/p&gt;
&lt;p&gt;Следующая статья: &lt;a href=&quot;https://rootaround.github.io/posts/blog/2021-01-linux-tools-shells-part-4-ash-redirections/&quot;&gt;shells, ash #3 - ash syntax, redirections&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&quot;ssylki&quot; tabindex=&quot;-1&quot;&gt;Ссылки &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-3-ash-commands/#ssylki&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://man7.org/linux/man-pages/man1/dash.1.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://man7.org/linux/man-pages/man1/dash.1.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://rootaround.github.io/tags/linux-tools&quot;&gt;Все статьи серии “Linux Tools”&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Linux Tools: shells, ash #1 - ash startup and arguments</title>
		<link href="https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/"/>
		<updated>2020-12-24T19:21:00Z</updated>
		<id>https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/</id>
		<content type="html">&lt;p&gt;ash - это минималистичный shell, который предоставляет меньше удобств по сравнению с bash, но по функционалу для скриптинга совместим с bash.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Первая статья: &lt;a href=&quot;https://rootaround.github.io/posts/blog/2020-12-linux-tools-shells-part-1-historical/&quot;&gt;Linux Tools: shells - историческая часть&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Следующая статья: &lt;a href=&quot;https://rootaround.github.io/posts/blog/2020-12-linux-tools-shells-part-3-ash-commands/&quot;&gt;Linux Tools: shells, , ash #2 - ash syntax, simple commands&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;В первой статье серии немного рассмотрели историю развития шеллов, на практике в статье &lt;a href=&quot;https://rootaround.github.io/posts/blog/linux-first-boot-mbr&quot;&gt;“Linux First: Загрузка ядра”&lt;/a&gt; мы уже использовали ash в качестве login shell и пришло время разобраться подробнее с режимами запуска и аргументами.&lt;/p&gt;
&lt;p&gt;Документации на ash в busybox нет, поэтому смотреть можно доку на dash — &lt;a href=&quot;https://man7.org/linux/man-pages/man1/dash.1.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://man7.org/linux/man-pages/man1/dash.1.html&lt;/a&gt;, тем более что сейчас в busybox за основу взята именно &lt;a href=&quot;https://git.busybox.net/busybox/tree/shell/ash.c#n28&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;эта версия&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;interactive-shell&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;interactive-shell&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#interactive-shell&quot;&gt;&lt;/a&gt; Interactive shell &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#interactive-shell&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Шелл может быть запущен в интерактивным и неинтерактивном режимах. По умолчанию ash запускается в интерактивном режиме, принудительно можно включить режим опцией &lt;code&gt;-i&lt;/code&gt;. В этом режиме команды ожидаются из stdin - стандартного input потока.&lt;/p&gt;
&lt;p&gt;Пара слов про потоки (streams), каждый linux-процесс имеет три потока: stdin, stdout, stderr.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;из &lt;strong&gt;stdin&lt;/strong&gt; можно читать входные данные, например, другой команды. Упрощенно - через stdin передается ввод команд с клавиатуры в интерактивном режиме;&lt;/li&gt;
&lt;li&gt;в &lt;strong&gt;stdout&lt;/strong&gt; процесс пишет свой вывод, результаты;&lt;/li&gt;
&lt;li&gt;в &lt;strong&gt;stderr&lt;/strong&gt; должны записываться сообщения об ошибках и отладке.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Подробнее с потоками и дескрипторами разбираться будем в серии Linux First.&lt;/p&gt;
&lt;p&gt;Интерактивный режим позволяет вводить, редактировать и выполнять команды снова, видеть ошибки выполнения команд, в общем напрямую взаимодействовать с системой.&lt;/p&gt;
&lt;h1 id=&quot;zapusk-shell-skriptov-non-interactive-shell&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;script-shell&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#script-shell&quot;&gt;&lt;/a&gt; Запуск shell-скриптов - non-interactive shell &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#zapusk-shell-skriptov-non-interactive-shell&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Противоположность интерактивному режиму - запуск скриптов с помощью ash, это режим включается при указании пути к скрипту или аргумента &lt;code&gt;-c&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ash ./test.sh

$ ash &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;echo 100500&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;С этим режимом связано довольно много аргументов ash, помогающих разрабатывать скрипты.&lt;/p&gt;
&lt;h2 id=&quot;noexec-argument-n&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;noexec-arg-adv&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#noexec-arg-adv&quot;&gt;&lt;/a&gt; noexec - аргумент &lt;code&gt;-n&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#noexec-argument-n&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Проверка скрипта без выполнения команд. Работает только при выполнении файла-скрипта, но &lt;strong&gt;не&lt;/strong&gt; работает при указании команд через &lt;code&gt;-c&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

$ ash test.sh
&lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;

$ ash &lt;span class=&quot;token parameter variable&quot;&gt;-n&lt;/span&gt; test.sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;У последней команды не будет никакого вывода, потому что указан аргумент &lt;code&gt;-n&lt;/code&gt; и команды echo и exit не будет выполнены, но в случае именно ошибки синтаксиса выведется текст ошибки и ненулевой exit code.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# &#39;&amp;amp;&#39; в начале это ошибка в shell-скрипте&lt;/span&gt;

$ ash &lt;span class=&quot;token parameter variable&quot;&gt;-n&lt;/span&gt; test.sh
./test.sh: line &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;: syntax error: unexpected &lt;span class=&quot;token string&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Конечно этот режим не проверяет наличие самих команд, но для проверки синтаксиса удобно.&lt;/p&gt;
&lt;h2 id=&quot;verbose-argument-v&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;verbose-arg-adv&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#verbose-arg-adv&quot;&gt;&lt;/a&gt; verbose - аргумент &lt;code&gt;-v&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#verbose-argument-v&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;В stderr будет записано все что ash читает в процессе работы.&lt;/p&gt;
&lt;p&gt;Например, в login-режиме (про него далее) читается файл &lt;code&gt;$HOME/.profile&lt;/code&gt; и выполняются команды из него – с опцией &lt;code&gt;-v&lt;/code&gt; все содержимое &lt;code&gt;.profile&lt;/code&gt; будет записано в stderr для отладки.&lt;/p&gt;
&lt;h2 id=&quot;xtrace-argument-x&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;xtrace-arg-adv&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#xtrace-arg-adv&quot;&gt;&lt;/a&gt; xtrace - аргумент &lt;code&gt;-x&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#xtrace-argument-x&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;С этим аргументом каждая выполняемая команда будет записано в stderr&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

$ ash &lt;span class=&quot;token parameter variable&quot;&gt;-x&lt;/span&gt; test.sh
+ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;
+ &lt;span class=&quot;token builtin class-name&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вообще все опции включатся через &lt;code&gt;-&lt;/code&gt; , а выключаются через &lt;code&gt;+&lt;/code&gt; &lt;em&gt;// кажется что нелогично и должно быть наоборот&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;В интерактивном режиме тоже можно включать опции с помощью builtin-команды set&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-x&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# xtrace ВКЛючен&lt;/span&gt;

$ &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; +x

&lt;span class=&quot;token comment&quot;&gt;# xtrace ВЫКЛючен&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;errexit-argument-e&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;errexit-arg-adv&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#errexit-arg-adv&quot;&gt;&lt;/a&gt; errexit - аргумент &lt;code&gt;-e&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#errexit-argument-e&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;С &lt;code&gt;-e&lt;/code&gt; все непротестированные команды (без проверки exit-кода через &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;elif&lt;/code&gt;) будут приводить к завершению скрипта.&lt;/p&gt;
&lt;p&gt;Для примера рассмотрим скрипт с листингом несуществующей директории.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; /none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;good&#39;&lt;/span&gt;

$ ash test.sh
ls: /none: No such &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; or directory
good
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$?&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;При обычном запуске команды &lt;code&gt;ls&lt;/code&gt; и &lt;code&gt;echo&lt;/code&gt; выполняются независимо друг от друга и &lt;code&gt;echo&lt;/code&gt; будет выполнено после &lt;code&gt;ls&lt;/code&gt; &lt;em&gt;// конечно в данном случае нужно использовать &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, но об этом в следующих статьях&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;С аргументом &lt;code&gt;-e&lt;/code&gt; выход из скрипта произойдет после &lt;code&gt;ls&lt;/code&gt; и скрипт завершится с ненулевым exit-кодом.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ash &lt;span class=&quot;token parameter variable&quot;&gt;-e&lt;/span&gt; test.sh
ls: /none: No such &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; or directory
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$?&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Еще один полезный момент — передача параметров при запуске скрипта. Все аргументы после указания пути к скрипту считаются позиционными аргументами и могут быть почитаны в скрипте из переменных $1, $2&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$11&lt;/span&gt;

$ ash test.sh &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Отдельно стоит отметить $0 - это переменная содержит путь к скрипту&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$0&lt;/span&gt;

$ ash ./test.sh
./test.sh&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;login-shell&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;login-shell&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#login-shell&quot;&gt;&lt;/a&gt; login shell &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#login-shell&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Еще одним режимом запуска является login, включается опцией &lt;code&gt;-l&lt;/code&gt; или передачей первым аргументом символа &lt;code&gt;-&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ash &lt;span class=&quot;token parameter variable&quot;&gt;-l&lt;/span&gt;

$ ash -&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Работает в interactive и non-interactive режимах.&lt;/p&gt;
&lt;p&gt;Смысл режима инициализировать окружение для пользователя. В login-режиме ash ищет и выполняет shell-скрипты &lt;code&gt;/etc/profile&lt;/code&gt; и &lt;code&gt;$HOME/.profile&lt;/code&gt;. Если в этих файлах указать и экспортировать переменную ENV, в которой указать путь к файлу, его содержимое также будет обработано и выполнено как shell-скрипт на этапе запуска.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token environment constant&quot;&gt;$HOME&lt;/span&gt;/.shinit&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; ENV&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h1 id=&quot;arguments&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;args&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#args&quot;&gt;&lt;/a&gt; Arguments &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#arguments&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Для полноты картины пройдемся по всем аргументам команды bash&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&quot;a&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;allexport-arg&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#allexport-arg&quot;&gt;&lt;/a&gt; &lt;code&gt;-a&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#a&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;allexport&lt;/p&gt;
&lt;p&gt;Экспорт env-переменных &lt;em&gt;// не увидел разницы с обычным режимом, все назначенные переменные окружения и так видны внутри shell при запуске&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;TEST&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt; ash &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;echo $TEST&#39;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;

$ &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;TEST&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt; ash &lt;span class=&quot;token parameter variable&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;echo $TEST&#39;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;c&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;command-arg&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#command-arg&quot;&gt;&lt;/a&gt; &lt;code&gt;-c&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#c&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Режим выполнения команд, выполняет команды указанные после аргумента&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ash &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;echo 100500&#39;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;100500&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;c-1&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;noclobber-arg&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#noclobber-arg&quot;&gt;&lt;/a&gt; &lt;code&gt;-C&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#c-1&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;noclobber &lt;em&gt;// не колошматить 😃&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;тут речь про оператор &lt;code&gt;&amp;gt;&lt;/code&gt; при перенаправление потока в файл, по умолчанию этот оператор создает или перезаписывает содержимое файла, аргумент &lt;code&gt;-C&lt;/code&gt; меняет это поведение — если файл уже существует, произойдет ошибка.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# скрипт записывает значение первого аргумента в файл tmp.txt&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; ./test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; tmp.txt

&lt;span class=&quot;token comment&quot;&gt;# выполняем&lt;/span&gt;
$ ash ./test.sh &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# в файл записано 100&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; tmp.txt
&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# выполняем еще раз&lt;/span&gt;
$ ash ./test.txt &lt;span class=&quot;token number&quot;&gt;101&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# файл перезаписан со значением 101&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; tmp.txt
&lt;span class=&quot;token number&quot;&gt;101&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# выполняем c аргументом -C - получаем ошибку&lt;/span&gt;
$ ash &lt;span class=&quot;token parameter variable&quot;&gt;-C&lt;/span&gt; ./test.txt &lt;span class=&quot;token number&quot;&gt;102&lt;/span&gt;
test.sh: line &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;: can&#39;t create test.txt: File exists&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;e&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;errexit-arg&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#errexit-arg&quot;&gt;&lt;/a&gt; &lt;code&gt;-e&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#e&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;errexit&lt;/p&gt;
&lt;p&gt;Этот аргумент &lt;a href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#errexit-arg-adv&quot;&gt;рассмотрели выше&lt;/a&gt; — выход из скрипта, если команда завершается с ненулевым exit-кодом и не обработана условиями типа &lt;code&gt;if&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;f&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;noglob-arg&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#noglob-arg&quot;&gt;&lt;/a&gt; &lt;code&gt;-f&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#f&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;noglob&lt;/p&gt;
&lt;p&gt;В шеллах существует прекрасная штука - file globbing - это возможность указывать путь к файлам не полностью, а, например, через wildcard — &lt;code&gt;cat *.txt&lt;/code&gt; — вывести на экран все файлы с расширением txt.&lt;/p&gt;
&lt;p&gt;Так вот опция &lt;code&gt;-f&lt;/code&gt; отключает file globbing для выполняемого скрипта.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token comment&quot;&gt;# this is script&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; *.sh

&lt;span class=&quot;token comment&quot;&gt;# выводит все файлы с расширением sh&lt;/span&gt;
$ ash test.sh
&lt;span class=&quot;token comment&quot;&gt;# this is script&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; *.sh

&lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; globbing отключен - *.sh интерпретируется как имя файла
$ ash &lt;span class=&quot;token parameter variable&quot;&gt;-f&lt;/span&gt; test.sh
cat: can&lt;span class=&quot;token string&quot;&gt;&#39;t open &#39;&lt;/span&gt;*.sh&#39;: No such &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; or directory&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;n&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;noexec-arg&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#noexec-arg&quot;&gt;&lt;/a&gt; &lt;code&gt;-n&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#n&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;noexec&lt;/p&gt;
&lt;p&gt;Не выполняет команды, удобно для проверки синтаксиса, подробнее &lt;a href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#noexec-arg-adv&quot;&gt;рассмотрели выше&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;u&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;nounset-arg&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#nounset-arg&quot;&gt;&lt;/a&gt; &lt;code&gt;-u&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#u&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;nounset&lt;/p&gt;
&lt;p&gt;Завершать скрипт с ошибкой если происходит обращение к переменной, которая не определена.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; test.sh
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$SOME&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# скрипт успешно выполнен, хотя переменная SOME не определена&lt;/span&gt;
$ ash test.sh

&lt;span class=&quot;token comment&quot;&gt;# с аргументом -u присходит ошибка&lt;/span&gt;
$ ash &lt;span class=&quot;token parameter variable&quot;&gt;-u&lt;/span&gt; test.sh
test.sh: line &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;: SOME: parameter not &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;v&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;verbose-arg&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#verbose-arg&quot;&gt;&lt;/a&gt; &lt;code&gt;-v&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#v&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;verbose&lt;/p&gt;
&lt;p&gt;Выводит в stderr все shell-файлы, которые ash читает и выполняет&lt;/p&gt;
&lt;h2 id=&quot;x&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;xtrace-arg&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#xtrace-arg&quot;&gt;&lt;/a&gt; &lt;code&gt;-x&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#x&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;xtrace&lt;/p&gt;
&lt;p&gt;Выводит в stderr все команды, которые ash выполняет&lt;/p&gt;
&lt;h2 id=&quot;i&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;ignoreeof-arg&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#ignoreeof-arg&quot;&gt;&lt;/a&gt; &lt;code&gt;-I&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#i&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ignoreeof&lt;/p&gt;
&lt;p&gt;Игнорирует EOF (символы конца строки) из stdin&lt;/p&gt;
&lt;p&gt;&lt;em&gt;// Пока не очень понятно зачем это нужно, но работает так&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# echo передает EOF (/n) после строки и скрипт выводит содержимое файла скриптов&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cat *.sh&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; ash
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$SOME&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# с -I конец строки игнорируется и будет ошибка&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cat *.sh&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; ash &lt;span class=&quot;token parameter variable&quot;&gt;-I&lt;/span&gt;
Use &lt;span class=&quot;token string&quot;&gt;&quot;exit&quot;&lt;/span&gt; to leave shell.

Use &lt;span class=&quot;token string&quot;&gt;&quot;exit&quot;&lt;/span&gt; to leave shell.

&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;i-1&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;interactive-arg&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#interactive-arg&quot;&gt;&lt;/a&gt; &lt;code&gt;-i&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#i-1&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;interactive&lt;/p&gt;
&lt;p&gt;принудительно включается интерактивный режим&lt;/p&gt;
&lt;h2 id=&quot;l&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;login-arg&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#login-arg&quot;&gt;&lt;/a&gt; &lt;code&gt;-l&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#l&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;login&lt;/p&gt;
&lt;p&gt;Включает login-режим&lt;/p&gt;
&lt;h2 id=&quot;m&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;monitor-arg&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#monitor-arg&quot;&gt;&lt;/a&gt; &lt;code&gt;-m&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#m&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;monitor&lt;/p&gt;
&lt;p&gt;включает job control, автоматически включается в интерактивном режиме, видимо позволяет включать работу с jobs в скриптах &lt;em&gt;// рассмотрим позже, но уже интересно — можно запустить задачу фоном в скрипте, а потом проконтролировать ее и завершить скрипт&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;s&quot; tabindex=&quot;-1&quot;&gt;&lt;a id=&quot;stdin-arg&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#stdin-arg&quot;&gt;&lt;/a&gt;&lt;code&gt;-s&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#s&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;stdin&lt;/p&gt;
&lt;p&gt;читать скрипт из stdin. Если не указан путь к скрипту, то включено.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;date&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; ash
Fri Dec &lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt; 00:38:31 UTC &lt;span class=&quot;token number&quot;&gt;2020&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# идентично c -s&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;date&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; ash &lt;span class=&quot;token parameter variable&quot;&gt;-s&lt;/span&gt;
Fri Dec &lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt; 00:38:31 UTC &lt;span class=&quot;token number&quot;&gt;2020&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# но не работает если указан скрипт&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;date&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; ash &lt;span class=&quot;token parameter variable&quot;&gt;-s&lt;/span&gt; test.sh
&lt;span class=&quot;token comment&quot;&gt;# test script commands&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# при этом выполняются обе команды с -c и -s&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;date&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; ash &lt;span class=&quot;token parameter variable&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;date&#39;&lt;/span&gt;
Fri Dec &lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt; 00:38:31 UTC &lt;span class=&quot;token number&quot;&gt;2020&lt;/span&gt;
Fri Dec &lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt; 00:38:31 UTC &lt;span class=&quot;token number&quot;&gt;2020&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h1 id=&quot;itogo&quot; tabindex=&quot;-1&quot;&gt;Итого &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#itogo&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Сегодня разобрали запуск ash, режимы и аргументы, в следующих статьях начнем разбирать возможности скриптов, синтаксис и команды.&lt;/p&gt;
&lt;p&gt;Следующая статья: &lt;a href=&quot;https://rootaround.github.io/posts/blog/2020-12-linux-tools-shells-part-3-ash-commands/&quot;&gt;Linux Tools: shells, ash #2 - ash syntax, simple commands&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&quot;ssylki&quot; tabindex=&quot;-1&quot;&gt;Ссылки &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-2-ash-startup/#ssylki&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://man7.org/linux/man-pages/man1/dash.1.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://man7.org/linux/man-pages/man1/dash.1.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://rootaround.github.io/tags/linux-tools&quot;&gt;Все статьи серии “Linux Tools”&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Linux Tools: shells - историческая часть</title>
		<link href="https://rootaround.github.io/2020-12-linux-tools-shells-part-1-historical/"/>
		<updated>2020-12-23T18:35:00Z</updated>
		<id>https://rootaround.github.io/2020-12-linux-tools-shells-part-1-historical/</id>
		<content type="html">&lt;p&gt;&lt;em&gt;Shell, шелл, терминал, консоль, Command Line Interface, cli&lt;/em&gt; – по сути все это название командного интерпретатора, которые существует во всех операционных системах и позволяет посылать системе команды для выполнения, собирать эти команды в скрипты и выполнять уже наборы команд.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Звучит все очень просто, но так было не всегда и все удобства современных командных интерпретаторов появились не сразу. Сегодня кратко рассмотрим историю развития шеллов.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1971, Thompson shell&lt;/strong&gt; - написан Кеном (внезапно) Томпсоном в Bell Labs и использовался в первой версии Unix. Кен Томпсон совместно с Денисом Ритчи являются ни много ни мало создателями операционной система Unix и языка программирования C.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1975, PWB (Mashey) shell&lt;/strong&gt; - разработан Джоном Маши (John Mashey) в Bell Labs для PWB (Programmer’s Workbench) Unix - дистрибутив для разработчиков (но не взлетел). Основан на Thompson Shell c фичами для упрощения разработки.&lt;/p&gt;
&lt;p&gt;Тут следует сделать небольшое отступление – все шеллы до Borne Shell были больше нацелены на выполнения команд (интерактивный режим), а не для скриптов.&lt;/p&gt;
&lt;p&gt;Thompson Shell создавался очень минималистичным, в одной из последних был реализован концепт пайпов (&lt;code&gt;command1 &amp;gt; command2&lt;/code&gt;), но в остальном даже такие простые вещи как &lt;code&gt;if&lt;/code&gt; были сделаны отдельными командами — основной функционал был направлен именно на выполнение команд.&lt;/p&gt;
&lt;p&gt;В Mashey shell &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;elseif&lt;/code&gt;, &lt;code&gt;goto&lt;/code&gt; (и другие) были добавлены как часть самого шелла, появились аналоги $HOME, $PATH.&lt;/p&gt;
&lt;p&gt;Bourne Shell был написан с нуля, фичи обсуждались с участниками сообщества, плюс популярность после публикации книги The Unix Programming Environment Брайна Кернигана и Роба Пайка — все это сыграло в пользу Borne Shell и разработка Mashey Shell была прекращена, хотя достаточно много фич из Mashey были реализованы в Borne.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1976, 1979, Bourne Shell (sh)&lt;/strong&gt; - в 1976 Стивен Борн начал разработку, а в 1979 Bourne Shell был включен в Unix версии 7 как шелл по умолчанию. Это первый распространенный шелл со скриптовым языком.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1978, C shell (csh)&lt;/strong&gt; – разработан Биллом Джоем, шелл с собственным синтаксисом несовместимым с sh, был широко распространен в BSD-дистрибутивах. Если &lt;strong&gt;sh&lt;/strong&gt; привносил удобства написания скриптов, то &lt;strong&gt;сsh&lt;/strong&gt; добавлял множество фич именно для пользователя: перенаправление потоков, пайпы, история, навигация внутри командной строки, автодополнение и еще много удобств интерактивного режима.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1983, Korn Shell (ksh)&lt;/strong&gt; - разработан Дэвидом Корном и первоначально основан на bash (видимо на каких-то дорелизных версиях). Позже реализованный в ksh механизм работы с задачами (jobs) был добавлен в bash.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1989, Born Again Shell (bash)&lt;/strong&gt; - первый релиз того самого шелла. Разрабатывался сначала Ричардом Столлманом, потом Брайном Фоксом. bash совместил лучшее из sh и csh, привнес свое и стал популярен в том числе благодаря Линусу Торвальдсу, который запустил bash одной из первых программ на своем новом ядре.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1989, Almquist shell (ash)&lt;/strong&gt; - Kenneth Almquist выпустил первую версию легковесного шелла совместимого с Bourne Shell. ash пришел на замену sh в BSD версиях Unix. Основным плюсом была его малый размер и скорость работы и конечно совместимость с sh.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1990, Z Shell (zsh)&lt;/strong&gt; - разработан Паулем Фалстадом (Paul Falstad). Кратко - это bash с кучей улучшений: история выполненных команд шарится между сессиями, программируемое автодополнение команд, коррекция опечаток (это все конечно уже в настоящее время).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1997, 2002, Debian Almquist shell (dash)&lt;/strong&gt; - в 1997 Herbert Xu портирует код из NetBSD в Debian Linux, а в 2002 происходит переимнование в dash.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2001&lt;/strong&gt; - код ash &lt;a href=&quot;https://git.busybox.net/busybox/commit/shell/ash.c?id=cb57d551a207198fabdb8c46f96e6a0932143923&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;добавлен&lt;/a&gt; в Busybox (это минимальный набор unix-утилит в одном бинарнике).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2005, Friendly interactive shell (fish)&lt;/strong&gt; - начал разрабатываться Акселем Лильенкранцем. Расширенное автодополнение, подсветка синтаксиса и другие улучшения нацеленные именно на удобство пользователя.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2006&lt;/strong&gt; - dash становится дефолтным шелом /bin/sh в дистрибутивах Ubuntu и Debian — вот так из 1980’ых в 2000’ые ash попал как базовый скриптовый шелл в одни из самых популярных дистрибутивов Linux.&lt;/p&gt;
&lt;p&gt;Многие шеллы завершили разработку, но в них были разработаны фичи, которые перенесли в более популярных реализации. С этой стороны, глобально, разработка каждого шелла в чем-то способствовала общему развитию.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h1 id=&quot;itogo&quot; tabindex=&quot;-1&quot;&gt;Итого &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-1-historical/#itogo&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Дальше более подробно рассмотрим современную реализацию ash. По скриптовым возможностям ash совместим с bash, но по функционалу (особенно интерактивному) гораздо меньше — поэтому изучив ash, изучим основу bash.&lt;/p&gt;
&lt;p&gt;Следующая статья: &lt;a href=&quot;https://rootaround.github.io/posts/blog/2020-12-linux-tools-shells-part-2-ash-startup/&quot;&gt;Linux Tools: shells, ash #1 - ash startup, ash arguments&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&quot;ssylki&quot; tabindex=&quot;-1&quot;&gt;Ссылки &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/2020-12-linux-tools-shells-part-1-historical/#ssylki&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Thompson_shell&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://en.wikipedia.org/wiki/Thompson_shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/PWB_shell&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://en.wikipedia.org/wiki/PWB_shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bourne_shell&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://en.wikipedia.org/wiki/Bourne_shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bash_(Unix_shell)&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://en.wikipedia.org/wiki/Bash_(Unix_shell)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Almquist_shell&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://en.wikipedia.org/wiki/Almquist_shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Z_shell&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://en.wikipedia.org/wiki/Z_shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/KornShell&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://en.wikipedia.org/wiki/KornShell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Ken_Thompson&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://en.wikipedia.org/wiki/Ken_Thompson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/John_Mashey&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://en.wikipedia.org/wiki/John_Mashey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Stephen_R._Bourne&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://en.wikipedia.org/wiki/Stephen_R._Bourne&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Unix_Programming_Environment&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Unix Programming Environment&lt;/a&gt; by &lt;a href=&quot;https://en.wikipedia.org/wiki/Brian_Kernighan&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Brian Kernighan&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Rob_Pike&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Rob Pike&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Version_7_Unix&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://en.wikipedia.org/wiki/Version_7_Unix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gondor.apana.org.au/~herbert/dash/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dash by Herbert Xu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ru.wikipedia.org/wiki/BusyBox&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ru.wikipedia.org/wiki/BusyBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.ubuntu.com/DashAsBinSh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://wiki.ubuntu.com/DashAsBinSh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://rootaround.github.io/tags/linux-tools&quot;&gt;Все статьи серии “Linux Tools”&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Linux First: Загрузка ядра</title>
		<link href="https://rootaround.github.io/linux-first-boot-mbr/"/>
		<updated>2020-05-15T00:00:00Z</updated>
		<id>https://rootaround.github.io/linux-first-boot-mbr/</id>
		<content type="html">&lt;p&gt;После предыдущего поста &lt;a href=&quot;https://rootaround.github.io/posts/blog/2020-05-13-linux-first-shortly-about-kernel/&quot;&gt;“Кратко о linux-ядре”&lt;/a&gt; есть общее представление как устроено ядро. Дальше поговорим про загрузку компьютера в общем и ядра в частности.&lt;/p&gt;
&lt;p&gt;Попутно создадим образ жесткого диска, на базе которого продолжим разбираться с linux в следующих статьях.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;zagruzka-ot-vklyucheniya-pk-do-ustrojstva&quot; tabindex=&quot;-1&quot;&gt;Загрузка от включения ПК до устройства &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/linux-first-boot-mbr/#zagruzka-ot-vklyucheniya-pk-do-ustrojstva&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;После включения код BIOS загружается в оперативную память (ОЗУ) из постоянной памяти (ПЗУ)&lt;/li&gt;
&lt;li&gt;После загрузки в ОЗУ код BIOS выполняет тест оборудования Power-On Self-Test (POST-тест)&lt;/li&gt;
&lt;li&gt;Читает настройки BIOS из ПЗУ&lt;/li&gt;
&lt;li&gt;Ищет и загружает в оперативную память код загрузчика&lt;/li&gt;
&lt;li&gt;Передает управление загрузчику&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Кроме этого BIOS предоставляет API для работы с устройствами еще до загрузки Операционной Системы&lt;/p&gt;
&lt;p&gt;Подробно останавливаться на этом этапе смысла нет,
мы будем собирать образ диска с linux и загружать его используя эмулятор QEMU&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;Подробнее про QEMU&lt;/summary&gt;
&lt;p&gt;&lt;a href=&quot;https://www.qemu.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.qemu.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Эмулятор аппаратных платформ, позволяет эмулировать разные процессоры.&lt;/p&gt;
&lt;p&gt;Мы будем использовать qemu для x86_64&lt;/p&gt;
&lt;/details&gt;
&lt;h2 id=&quot;zagruzka-s-ustrojstva&quot; tabindex=&quot;-1&quot;&gt;Загрузка с устройства &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/linux-first-boot-mbr/#zagruzka-s-ustrojstva&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;info&quot;&gt;
&lt;p&gt;Все команды выполнялись на ubuntu 16.04&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;BIOS в зависимости от своих настроек выбирает устройство для загрузки или последовательно проверяет несколько устройств.&lt;/p&gt;
&lt;p&gt;в случае с QEMU это выглядит так:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ qemu-system-x86_64 &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# запускаем эмулятор с архитектурой x86_64&lt;/span&gt;
    &lt;span class=&quot;token parameter variable&quot;&gt;-nographic&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;       &lt;span class=&quot;token comment&quot;&gt;# весь вывод будет в консоль, иначе откроется gui-окно&lt;/span&gt;
    &lt;span class=&quot;token parameter variable&quot;&gt;-m&lt;/span&gt; 128m            &lt;span class=&quot;token comment&quot;&gt;# оперативки будет 128 Мб - нам хватит&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.

Booting from Hard Disk&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
Boot failed: could not &lt;span class=&quot;token builtin class-name&quot;&gt;read&lt;/span&gt; the boot disk

Booting from Floppy&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
Boot failed: could not &lt;span class=&quot;token builtin class-name&quot;&gt;read&lt;/span&gt; the boot disk

Booting from DVD/CD&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
Boot failed: Could not &lt;span class=&quot;token builtin class-name&quot;&gt;read&lt;/span&gt; from CDROM &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;code 0003&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
Booting from ROM&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.

&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;message&quot;&gt;
&lt;p&gt;Выход из QEMU по &lt;code&gt;CTRL+a x&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Ни CDROM, ни диск не указан, поэтому и загрузки не происходит.&lt;/p&gt;
&lt;p&gt;Исправляем это и создаем маленький по современным меркам жесткий диск на 256 mb.&lt;/p&gt;
&lt;p&gt;Перед созданием образа стоит поговорить про стандарты таблиц разделов на диске. Сейчас их два:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MBR (Main Boot Record) - старый стандарт таблицы разделов (из 1983 года)&lt;/li&gt;
&lt;li&gt;GPT (Guid Partition Table) - современный стандарт разделов, является частью стандарта EFI (Extensible Firmware Interface), разработанного Intel для замены BIOS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Подробнее про стандарты будет ссылка в конце статьи. Сейчас сделаем образ с MBR, а как-нибудь в другой серии с GPT, потому что с ним все немного сложнее&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;dd&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/dev/zero &lt;span class=&quot;token assign-left variable&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;./mbr_hdd.img &lt;span class=&quot;token assign-left variable&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;1024k &lt;span class=&quot;token assign-left variable&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;256&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;256&lt;/span&gt;+0 records &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;256&lt;/span&gt;+0 records out
&lt;span class=&quot;token number&quot;&gt;268435456&lt;/span&gt; bytes transferred &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.362737&lt;/span&gt; secs &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;740027899&lt;/span&gt; bytes/sec&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;details&gt;&lt;summary&gt;немного про dd&lt;/summary&gt;
&lt;p&gt;&lt;code&gt;dd&lt;/code&gt; позволяет копировать файлы блоками заданного размера&lt;/p&gt;
&lt;p&gt;в данном случае мы копируем нули из /dev/zero блоками по 1024 килобайт (1Mb) 256 раз&lt;/p&gt;
&lt;p&gt;про dd и устройство файловой систему будем разбираться в следующих статьях&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;Если сразу попытаться подсунуть образ диска в qemu, то ничего не поменятся,
так как на диске нет таблицы разделов, а только нули.&lt;/p&gt;
&lt;p&gt;Создаем один загрузочный linux-раздел, например, с помощью fdisk (или cfdisk или parted)&lt;/p&gt;
&lt;p&gt;Должно получиться так:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;fdisk&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-l&lt;/span&gt; ./mbr_hdd.img
Disk ./mbr_hdd.img: &lt;span class=&quot;token number&quot;&gt;256&lt;/span&gt; MiB, &lt;span class=&quot;token number&quot;&gt;268435456&lt;/span&gt; bytes, &lt;span class=&quot;token number&quot;&gt;524288&lt;/span&gt; sectors
Units: sectors of &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; bytes
Sector size &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;logical/physical&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; bytes / &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; bytes
I/O size &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;minimum/optimal&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; bytes / &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt; bytes
Disklabel type: dos
Disk identifier: 0x00000000

Device         Boot Start    End Sectors  Size Id Type
./mbr_hdd.img1 *     &lt;span class=&quot;token number&quot;&gt;2048&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;524287&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;522240&lt;/span&gt;  255M &lt;span class=&quot;token number&quot;&gt;83&lt;/span&gt; Linux&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Теперь на диске есть таблица разделов, пробуем загружаться:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ qemu-system-x86_64 &lt;span class=&quot;token parameter variable&quot;&gt;-nographic&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-m&lt;/span&gt; 128m &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;token parameter variable&quot;&gt;-boot&lt;/span&gt; c &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;          &lt;span class=&quot;token comment&quot;&gt;# загружаться с жесткого диска&lt;/span&gt;
  &lt;span class=&quot;token parameter variable&quot;&gt;-hda&lt;/span&gt; ./mbr_hdd.img &lt;span class=&quot;token comment&quot;&gt;# указываем образ первого жесткого диска&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.

Booting from Hard Disk&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;У нас есть жесткий диск, на нем есть таблица разделов, есть загрузочный раздел - пришло время поговорить про загрузчики.&lt;/p&gt;
&lt;h3 id=&quot;zagruzchik-bootloader&quot; tabindex=&quot;-1&quot;&gt;Загрузчик (bootloader) &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/linux-first-boot-mbr/#zagruzchik-bootloader&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Для linux по большому счету существует два загрузчика: LILO и GRUB.&lt;/p&gt;
&lt;p&gt;LILO считается устаревшим, он не умеет работать с файловыми системами и для его конфигурации нужно каждый раз обновлять загрузочную запись на диске. Его рассматривать не будем.&lt;/p&gt;
&lt;p&gt;GRUB умеет работать с разными файловыми системами, multiboot, grub-shell, консоль восстановления и много чего еще.&lt;/p&gt;
&lt;p&gt;Конфиги GRUB, архивы с ядрами и initrd можно смотреть и править в каталоге (разделе) &lt;code&gt;/boot&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Для начала нужно создать файловую систему в разделе нашего hdd.&lt;/p&gt;
&lt;p&gt;Для реальных hdd разделы диска будут отображатся с номерами в /dev и в выводе команды &lt;code&gt;lsblk&lt;/code&gt; выглядят примерно так:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# lsblk показывает блочные устройства в системе&lt;/span&gt;

$ lsblk

&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
sda         &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;:0    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;    10G  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; disk
└─sda1      &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;:1    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;    10G  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; part /mnt
&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Видим что примонтирован диск sda с одним разделом sda1.
Для нашего образа диска нам нужно как-то подключить файл образа как устройство.&lt;/p&gt;
&lt;p&gt;Один из способов - команда &lt;code&gt;losetup&lt;/code&gt;, с помощью нее можно подключать образы как блочные устройства.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; losetup &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;token parameter variable&quot;&gt;--find&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;      &lt;span class=&quot;token comment&quot;&gt;# ищет свободный id для блочного устройства&lt;/span&gt;
    &lt;span class=&quot;token parameter variable&quot;&gt;--partscan&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# ищет на устройстве разделы, а нас как раз один раздел&lt;/span&gt;
    ./mbr_hdd.img

$ lsblk

&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
loop0       &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;:0    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;  256M  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; loop &lt;span class=&quot;token comment&quot;&gt;# видим наш диск с одним разделом&lt;/span&gt;
└─loop0p1 &lt;span class=&quot;token number&quot;&gt;259&lt;/span&gt;:0    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;  255M  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; loop
&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Теперь можем форматировать раздел в ext4:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; mkfs.ext4 /dev/loop0p1

&lt;span class=&quot;token function&quot;&gt;mke2fs&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.42&lt;/span&gt;.13 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;-May-2015&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
Writing superblocks and filesystem accounting information: &lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Примонтируем раздел и посмотрим что на нем есть.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; /mnt/hdd               &lt;span class=&quot;token comment&quot;&gt;# создаем точку монтирования&lt;/span&gt;

$ &lt;span class=&quot;token function&quot;&gt;mount&lt;/span&gt; /dev/loop0p1 /mnt/hdd  &lt;span class=&quot;token comment&quot;&gt;# монтируем раздел&lt;/span&gt;

$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-l&lt;/span&gt; /mnt/hdd               &lt;span class=&quot;token comment&quot;&gt;# внутри только lost+found&lt;/span&gt;

total &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;
drwx------ &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; root root &lt;span class=&quot;token number&quot;&gt;12288&lt;/span&gt; May &lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;:45 lost+found
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вот мы плавно и подошли к установке загрузчика - как говорил ранее, будем ставить grub.&lt;/p&gt;
&lt;p&gt;При установке загрузчик будет записывать файлы непосредственно в файловую систему и изменять MBR на самом диске.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; grub-install &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
    --root-directory&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/mnt/hdd &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# тут нужно указывать полный путь до примонтированного раздела&lt;/span&gt;
     /dev/loop0                  &lt;span class=&quot;token comment&quot;&gt;# тут указываем сам диск, а не раздел&lt;/span&gt;

Installing &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i386-pc platform.
Installation finished. No error reported.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;На диске появилась директория &lt;code&gt;boot&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-l&lt;/span&gt; /mnt/hdd/boot/grub/
total &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;
drwxr-xr-x &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; root root &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt; May &lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;:50 fonts
-rw-r--r-- &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root root &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt; May &lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;:50 grubenv
drwxr-xr-x &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; root root &lt;span class=&quot;token number&quot;&gt;9216&lt;/span&gt; May &lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;:50 i386-pc
drwxr-xr-x &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; root root &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt; May &lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;:50 locale

&lt;span class=&quot;token comment&quot;&gt;# а команда file говорит так&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; mbr_hdd.img
mbr_hdd.img: DOS/MBR boot sector&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Загрузчик установлен, пробуем загружаться в QEMU&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ qemu-system-x86_64 &lt;span class=&quot;token parameter variable&quot;&gt;-nographic&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-m&lt;/span&gt; 128m &lt;span class=&quot;token parameter variable&quot;&gt;-boot&lt;/span&gt; c &lt;span class=&quot;token parameter variable&quot;&gt;-hda&lt;/span&gt; ./mbr_hdd.img

&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.

Booting from Hard Disk&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.

                             GNU GRUB  version &lt;span class=&quot;token number&quot;&gt;2.02&lt;/span&gt;

   Minimal &lt;span class=&quot;token environment constant&quot;&gt;BASH&lt;/span&gt;-like line editing is supported. For the first word, TAB
   lists possible &lt;span class=&quot;token builtin class-name&quot;&gt;command&lt;/span&gt; completions. Anywhere &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; TAB lists possible
   device or &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; completions.


grub&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Видим приветствие GRUB и grub shell.&lt;/p&gt;
&lt;p&gt;В шелле можно посмотреть диски, информацию по разделам, поставить классные картинки на boot-screen, но то что нам пригодится сейчас - это возможность указать путь до образа ядра и ram-диска.&lt;/p&gt;
&lt;h3 id=&quot;zagruzka-yadra&quot; tabindex=&quot;-1&quot;&gt;Загрузка ядра &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/linux-first-boot-mbr/#zagruzka-yadra&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;самый простой вариант получить образ ядра это скопировать его уже из готовой системы&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-l&lt;/span&gt; /boot
total &lt;span class=&quot;token number&quot;&gt;31584&lt;/span&gt;
-rw-r--r-- &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root root   &lt;span class=&quot;token number&quot;&gt;217458&lt;/span&gt; Apr &lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;:31 config-4.15.0-99-generic
drwxr-xr-x &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; root root     &lt;span class=&quot;token number&quot;&gt;4096&lt;/span&gt; May &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;:58 grub
-rw-r--r-- &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root root &lt;span class=&quot;token number&quot;&gt;19659681&lt;/span&gt; May &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;:57 initrd.img-4.15.0-99-generic
-rw------- &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root root  &lt;span class=&quot;token number&quot;&gt;4071696&lt;/span&gt; Apr &lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;:31 System.map-4.15.0-99-generic
-rw------- &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root root  &lt;span class=&quot;token number&quot;&gt;8380056&lt;/span&gt; Apr &lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;:32 vmlinuz-4.15.0-99-generic

$ &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; /boot/vmlinuz-4.15.0-99-generic /mnt/hdd/boot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Запускаем QEMU и в консоли grub грузим ядро:&lt;/p&gt;
&lt;div class=&quot;info&quot; style=&quot;margin-bottom: 15px&quot;&gt;
&lt;p&gt;тут поменял -nographic на -curses, так лучше отображается в консоли, но этот ключ можно вообще убрать и работать в отдельном окне.&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ qemu-system-x86_64 &lt;span class=&quot;token parameter variable&quot;&gt;-curses&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-m&lt;/span&gt; 128m &lt;span class=&quot;token parameter variable&quot;&gt;-boot&lt;/span&gt; c &lt;span class=&quot;token parameter variable&quot;&gt;-hda&lt;/span&gt; ./mbr_hdd.img

grub&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; /boot
grub/ vmlinuz-4.15.0-99-generic                  &lt;span class=&quot;token comment&quot;&gt;# вот ядро в директории /boot&lt;/span&gt;

grub&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; linux /boot/vmlinuz-4.15.0-99-generic      &lt;span class=&quot;token comment&quot;&gt;# указываем какое ядро загружать&lt;/span&gt;
grub&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; boot                                       &lt;span class=&quot;token comment&quot;&gt;# загружаемся&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.                                              &lt;span class=&quot;token comment&quot;&gt;# тут лог загрузки&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# и в итоге получаем ошибку kernel panic&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;2.159628&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; ---&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; end Kernel panic - not syncing: VFS: Unable to &lt;span class=&quot;token function&quot;&gt;mount&lt;/span&gt; root fs  on unknown-block&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0,0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;message&quot;&gt;
&lt;p&gt;В этом режиме чтобы выйти из виртуалки нужно перейти в QEMU monitor по &lt;code&gt;Ctrl-Alt-2&lt;/code&gt; и выполнить команду &lt;code&gt;quit&lt;/code&gt;. Подробнее про хоткеи в &lt;a href=&quot;https://qemu.weilnetz.de/doc/qemu-doc.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;доке&lt;/a&gt; раздел “2.4 Keys in the graphical frontends”&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;После загрузки ядро должно иметь временную файловую систему и из нее запустить первый процесс в пользовательском пространстве с pid=1.&lt;/p&gt;
&lt;p&gt;Временная файловая система (ram-диск) это и есть initrd и этот образ нужно будет собрать.&lt;/p&gt;
&lt;p&gt;После загрузки ядра при запуске пользовательского пространства нужны хоть какие-то команды и есть такой набор инструментов - busybox.&lt;/p&gt;
&lt;p&gt;busybox - это один бинарный файл, который содержит в себе минимальный набор программ для работы с системой. Добавим busybox в сборке ram-диска.&lt;/p&gt;
&lt;h3 id=&quot;minimalnyj-initrd&quot; tabindex=&quot;-1&quot;&gt;минимальный initrd &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/linux-first-boot-mbr/#minimalnyj-initrd&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; initrd
&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; initrd

&lt;span class=&quot;token comment&quot;&gt;# создаем основные директории&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; bin sys dev proc

&lt;span class=&quot;token comment&quot;&gt;#  загружаем busybox и расставляем симлинки&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;wget&lt;/span&gt; https://busybox.net/downloads/binaries/1.30.0-i686/busybox &lt;span class=&quot;token parameter variable&quot;&gt;-O&lt;/span&gt; bin/busybox

&lt;span class=&quot;token comment&quot;&gt;# обязательно нужно добавить права на выполнение для busybox&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; +x bin/busybox

&lt;span class=&quot;token comment&quot;&gt;# симлинки для некоторых команд, остальные добавим позже&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-s&lt;/span&gt; busybox bin/echo
&lt;span class=&quot;token function&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-s&lt;/span&gt; busybox bin/ash
&lt;span class=&quot;token function&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-s&lt;/span&gt; busybox bin/ls
&lt;span class=&quot;token function&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-s&lt;/span&gt; busybox bin/cat

&lt;span class=&quot;token comment&quot;&gt;# копируем файлы устройств, про файлы в linux поговорим в других статьях&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-a&lt;/span&gt; /dev/console ./dev
&lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-a&lt;/span&gt; /dev/null ./dev
&lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-a&lt;/span&gt; /dev/tty1 ./dev
&lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-a&lt;/span&gt; /dev/tty2 ./dev

&lt;span class=&quot;token comment&quot;&gt;# создаем скрипт с которого начнется запуск пользовательского пространства&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; ./init &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;EOF
#!/bin/ash
/bin/ash --login
EOF&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# делаем скрипт исполняемым&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; +x init

&lt;span class=&quot;token comment&quot;&gt;# из этой же директории пакуем initrd в cpio-архив&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; cpio &lt;span class=&quot;token parameter variable&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-H&lt;/span&gt; newc &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;gzip&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-9&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;/initrd.img
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;копируем полученный initrd.img в /boot на нашем hdd&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; ./initrd.img /mnt/hdd/boot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;и запускаем qemu:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ qemu-system-x86_64 &lt;span class=&quot;token parameter variable&quot;&gt;-curses&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-m&lt;/span&gt; 128m &lt;span class=&quot;token parameter variable&quot;&gt;-boot&lt;/span&gt; c &lt;span class=&quot;token parameter variable&quot;&gt;-hda&lt;/span&gt; ./mbr_hdd.img

grub&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; /boot
grub/ vmlinuz-4.15.0-99-generic initrd.img

grub&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; linux /boot/vmlinuz-4.15.0-99-generic    &lt;span class=&quot;token comment&quot;&gt;# задаем ядро&lt;/span&gt;
grub&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; initrd /boot/initrd.img                  &lt;span class=&quot;token comment&quot;&gt;# задаем образ initrd&lt;/span&gt;

grub&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; boot                                     &lt;span class=&quot;token comment&quot;&gt;# грузимся&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.

/ &lt;span class=&quot;token comment&quot;&gt;# ls&lt;/span&gt;

 bin   dev   init  proc  root  sbin  sys&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Видим процесс загрузки ядра, после загрузки видим шелл, выполняем &lt;code&gt;ls&lt;/code&gt; и видим содержимое диска - самый минимум грузится осталось немного автоматизировать процесс загрузки.&lt;/p&gt;
&lt;p&gt;Настроим grub чтобы система стартовала без ручного ввода ядра и ram-диска.&lt;/p&gt;
&lt;p&gt;Для этого достаточно в &lt;code&gt;/boot/grub&lt;/code&gt; создать файл &lt;code&gt;grub.cfg&lt;/code&gt; (для grub2 нужно именно расширение &lt;code&gt;.cfg&lt;/code&gt;, а не &lt;code&gt;.conf&lt;/code&gt;)&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;

menuentry &lt;span class=&quot;token string&quot;&gt;&#39;linux&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  linux /boot/vmlinuz-4.15.0-99-generic
  initrd /boot/initrd.img
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;если снова запустить qemu - увидим меню выбора системы&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://rootaround.github.io/assets/img/We2UeWCtDI-640.webp 640w, https://rootaround.github.io/assets/img/We2UeWCtDI-768.webp 768w, https://rootaround.github.io/assets/img/We2UeWCtDI-1280.webp 1280w&quot; sizes=&quot;(max-width: 768px) 100vw, 768px&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://rootaround.github.io/assets/img/We2UeWCtDI-640.jpeg 640w, https://rootaround.github.io/assets/img/We2UeWCtDI-768.jpeg 768w, https://rootaround.github.io/assets/img/We2UeWCtDI-1280.jpeg 1280w&quot; sizes=&quot;(max-width: 768px) 100vw, 768px&quot; /&gt;&lt;source type=&quot;image/png&quot; srcset=&quot;https://rootaround.github.io/assets/img/We2UeWCtDI-640.png 640w, https://rootaround.github.io/assets/img/We2UeWCtDI-768.png 768w, https://rootaround.github.io/assets/img/We2UeWCtDI-1280.png 1280w&quot; sizes=&quot;(max-width: 768px) 100vw, 768px&quot; /&gt;&lt;img alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://rootaround.github.io/assets/img/We2UeWCtDI-640.jpeg&quot; width=&quot;1280&quot; height=&quot;892&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;потом загрузку ядра и шелл&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://rootaround.github.io/assets/img/W_PXiu_U7h-640.webp 640w, https://rootaround.github.io/assets/img/W_PXiu_U7h-768.webp 768w&quot; sizes=&quot;(max-width: 768px) 100vw, 768px&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://rootaround.github.io/assets/img/W_PXiu_U7h-640.jpeg 640w, https://rootaround.github.io/assets/img/W_PXiu_U7h-768.jpeg 768w&quot; sizes=&quot;(max-width: 768px) 100vw, 768px&quot; /&gt;&lt;source type=&quot;image/png&quot; srcset=&quot;https://rootaround.github.io/assets/img/W_PXiu_U7h-640.png 640w, https://rootaround.github.io/assets/img/W_PXiu_U7h-768.png 768w&quot; sizes=&quot;(max-width: 768px) 100vw, 768px&quot; /&gt;&lt;img alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://rootaround.github.io/assets/img/W_PXiu_U7h-640.jpeg&quot; width=&quot;768&quot; height=&quot;570&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;h2 id=&quot;itogo&quot; tabindex=&quot;-1&quot;&gt;Итого &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/linux-first-boot-mbr/#itogo&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;В общих чертах разобрались с процессом загрузки и создали образ, в котором загружается ядро и первым процессом стартует shell (ash). Это только начало, дальше будем разбираться с файловой системой и с тем процесс должен быть запущен первым, да и вообще с процессами и не только.&lt;/p&gt;
&lt;h2 id=&quot;primery&quot; tabindex=&quot;-1&quot;&gt;Примеры &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/linux-first-boot-mbr/#primery&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Готовый образ из статьи можно взять тут:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rootaround/examples/tree/master/linux-first/2020-05-13-boot-mbr&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/rootaround/examples/tree/master/linux-first/2020-05-13-boot-mbr&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;ssylki&quot; tabindex=&quot;-1&quot;&gt;Ссылки &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/linux-first-boot-mbr/#ssylki&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Про BIOS: &lt;a href=&quot;https://ru.wikipedia.org/wiki/BIOS&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ru.wikipedia.org/wiki/BIOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Про стандарты таблиц разделов MBR, GPT &lt;a href=&quot;https://losst.ru/chem-otlichaetsya-mbr-ot-gpt&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://losst.ru/chem-otlichaetsya-mbr-ot-gpt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Форматирование диска: &lt;a href=&quot;https://losst.ru/formatirovanie-diska-v-linux&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://losst.ru/formatirovanie-diska-v-linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GRUB (wikipedia) &lt;a href=&quot;https://ru.wikipedia.org/wiki/GNU_GRUB&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ru.wikipedia.org/wiki/GNU_GRUB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GNU GRUB официальная дока &lt;a href=&quot;https://www.gnu.org/software/grub/manual/grub/grub.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.gnu.org/software/grub/manual/grub/grub.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IBM: Подробности процесса загрузки Linux &lt;a href=&quot;https://www.ibm.com/developerworks/ru/library/l-linuxboot/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.ibm.com/developerworks/ru/library/l-linuxboot/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
GRUB

- https://superuser.com/questions/130955/how-to-install-grub-into-an-img-file
- https://ru.wikibooks.org/wiki/Grub_2#%D0%92%D0%BE%D1%81%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_GRUB2_%D1%81_LiveCD
- https://www.gnu.org/software/grub/manual/grub/grub.html
- https://wiki.archlinux.org/index.php/GRUB_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)#%D0%9A%D0%BE%D0%BD%D1%81%D0%BE%D0%BB%D1%8C_GRUB2
- https://serverfault.com/questions/869559/grub-hangs-before-menu-after-a-hdd-upgrade-how-to-debug



https://www.ibm.com/developerworks/library/l-initrd/
https://www.kernel.org/doc/html/v4.14/admin-guide/initrd.html
https://ru.wikipedia.org/wiki/BusyBox
https://habr.com/post/126427/

http://iportnov.blogspot.com/2010/03/linux-10.html

https://losst.ru/ustanovka-zagruzchika-grub
https://losst.ru/chem-otlichaetsya-mbr-ot-gpt

https://www.ibm.com/developerworks/ru/library/l-linuxboot/

https://unix.stackexchange.com/questions/124681/how-to-ssh-from-host-to-guest-using-qemu

https://losst.ru/sobiraem-yadro-linux

https://ru.wikipedia.org/wiki/Процесс_загрузки_Linux

https://losst.ru/ustanovka-zagruzchika-grub

https://losst.ru/nastrojka-zagruzchika-grub

https://wiki.archlinux.org/index.php/GRUB_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)#%D0%9A%D0%BE%D0%BD%D1%81%D0%BE%D0%BB%D1%8C_GRUB2

--&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://rootaround.github.io/tags/linux-first&quot;&gt;Все статьи серии “Linux First”&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Linux First: Кратко о linux-ядре</title>
		<link href="https://rootaround.github.io/linux-first-shortly-about-kernel/"/>
		<updated>2020-05-13T01:00:00Z</updated>
		<id>https://rootaround.github.io/linux-first-shortly-about-kernel/</id>
		<content type="html">&lt;p&gt;Этим постом начинаю серию статей “Linux First” - разбираюсь как устроен и как работает linux с начала загрузки ядра и дальше про подсистемы, сеть, процессы и многое другое.&lt;/p&gt;
&lt;p&gt;Cписок статей серии можно найти по тэгу &lt;a href=&quot;https://rootaround.github.io/tags/linux-first&quot;&gt;linux-first&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Сегодня немного про историю и в общем про архитектуру.&lt;/p&gt;
&lt;h3 id=&quot;istoriya&quot; tabindex=&quot;-1&quot;&gt;История &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/linux-first-shortly-about-kernel/#istoriya&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;В августе 1991 года Линус Торвальдс написал в новостную ленту “minix” &lt;a href=&quot;https://groups.google.com/forum/#!msg/comp.os.minix/dlNtH7RRrGA/SwRavCzVE7gJ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;сообщение&lt;/a&gt; о том что он разрабатывает свободную операционую систему и хочет получить фидбэк от заинтересованных людей.&lt;/p&gt;
&lt;p&gt;В сентябре Линус опубликовал версию 0.01. Этот исторический код можно посмотреть на &lt;a href=&quot;https://github.com/zavg/linux-0.01&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.oldlinux.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Особо сентиментальные ребята&lt;/a&gt; запилили образы для Qemu, в которых запускаются первые версии ядра и можно даже вызывать “доисторические” команды ls без хэлпов и прочих прелестей современных unix-команд.&lt;/p&gt;
&lt;p&gt;К проекту сразу появился интерес и совместными усилиями Линуса и коммьюнити linux-ядро начало развиваться.&lt;/p&gt;
&lt;p&gt;Через 3 года в 1994 выходит &lt;a href=&quot;https://github.com/kalamangga-net/linux-1.0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;первая версия&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ядро изначально проектировалось как монолитное и переносимое на разные процессорные архитектуры.
Собственно из-за аритектуры в 1992 в группе обсуждения minix разгорелся холивар “монолит-ядро vs микро-ядрo” между Линусом Торвальдсом и Эндрю Таненбаумом (&lt;em&gt;почти как и сейчас про монолит vs микросервисы&lt;/em&gt;).&lt;/p&gt;
&lt;!-- ОС Minix была разработана Эндрю Таненбаумом для образовательных целей, чтобы его студенты могли  поэкспериментировать с операционной системой. --&gt;
&lt;p&gt;Основной посыл холивара был в том что монолитное ядро устарело уже в 1992 году, а микроядра рулят и за ними будущее, но как показала история, даже 26 лет спустя монолитное ядро все еще живо и продолжает развиваться.&lt;/p&gt;
&lt;p&gt;Текущая версия доросла до &lt;code&gt;5.6&lt;/code&gt; (май 2020) и код начиная с &lt;code&gt;2.6&lt;/code&gt; можно смотреть на &lt;a href=&quot;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/refs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;оф сайте&lt;/a&gt; или на github-зеркале &lt;a href=&quot;https://github.com/torvalds/linux&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;torvalds/linux&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;arhitektura&quot; tabindex=&quot;-1&quot;&gt;Архитектура &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/linux-first-shortly-about-kernel/#arhitektura&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://rootaround.github.io/assets/img/WWqz2PWZIQ-410.webp 410w&quot; sizes=&quot;(max-width: 768px) 100vw, 768px&quot; /&gt;&lt;source type=&quot;image/png&quot; srcset=&quot;https://rootaround.github.io/assets/img/WWqz2PWZIQ-410.png 410w&quot; sizes=&quot;(max-width: 768px) 100vw, 768px&quot; /&gt;&lt;img alt=&quot;Cхема из статьи IBM &amp;quot;Анатомия ядра Linux&amp;quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://rootaround.github.io/assets/img/WWqz2PWZIQ-410.jpeg&quot; width=&quot;410&quot; height=&quot;250&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Ядро делится на пространство ядра и пространство пользователя.&lt;/p&gt;
&lt;p&gt;Пространство ядра через Интерфейс системных вызовов (SCI) позволяется вызывать функции ядра из пространства пользователя.&lt;/p&gt;
&lt;p&gt;Вся работа с железом контролируется ядром, основная часть ядра архитектурно-независима, то есть этот код работает на любой архитектуре процессоров.&lt;/p&gt;
&lt;p&gt;Специфичный код для работы с железом - архитектуро-зависимый - и либо уже есть в дистрибутиве Linux для определенной архитектуры, либо добавляется с помощью драйверов.&lt;/p&gt;
&lt;p&gt;Ресурсы &lt;strong&gt;CPU&lt;/strong&gt; распределяются между процессами планировщиком процессов O(1). Код планировщика может использовать фишки определенной процессорной архитектуры, поэтому как раз код планировщика разделен на архитектурно-независимый и архитектурно-зависимый.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Память&lt;/strong&gt; аналогично ресурсам CPU контролируется ядром и эта же подсистема управляет подкачкой (swap).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Виртуальная файловая система (VFS)&lt;/strong&gt; абстрагирует от конкретных файловых систем и через SCI позволяет работать с любыми файловыми система одинаково. Поддержка конкретных файлов систем добавляется через модули ядра.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Сеть&lt;/strong&gt; контролируется отдельной подсистемой и через все тот же SCI позволяет открывать и работать с сетевыми сокетами разных протоколов.&lt;/p&gt;
&lt;p&gt;Если хочется узнать подробнее про подсистемы - есть целая интерактивная карта linux-ядра, из которой можно узнать много нового и интересного - &lt;a href=&quot;http://www.makelinux.net/kernel_map/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;www.makelinux.net/kernel_map&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ну и документацию конечно никто не отменял &lt;a href=&quot;https://www.kernel.org/doc/html/latest/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;www.kernel.org/doc/html/latest/&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;istochniki&quot; tabindex=&quot;-1&quot;&gt;Источники &lt;a class=&quot;direct-link&quot; href=&quot;https://rootaround.github.io/linux-first-shortly-about-kernel/#istochniki&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Схема архитектуры и описание из статьи IBM “&lt;a href=&quot;https://www.ibm.com/developerworks/ru/library/l-linux-kernel/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Анатомия ядра Linux&lt;/a&gt;”. В статье чуть подробнее описано как устроено ядро.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://rootaround.github.io/tags/linux-first&quot;&gt;Все статьи серии “Linux First”&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
</feed>
